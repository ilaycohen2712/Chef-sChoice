Index: local.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>## This file must *NOT* be checked into Version Control Systems,\r\n# as it contains information specific to your local configuration.\r\n#\r\n# Location of the SDK. This is only used by Gradle.\r\n# For customization when using a Version Control System, please read the\r\n# header note.\r\n#Sun Apr 14 19:10:01 IDT 2024\r\nsdk.dir=C\\:\\\\Users\\\\DELL\\\\AppData\\\\Local\\\\Android\\\\Sdk\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/local.properties b/local.properties
--- a/local.properties	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ b/local.properties	(date 1713357413528)
@@ -4,5 +4,5 @@
 # Location of the SDK. This is only used by Gradle.
 # For customization when using a Version Control System, please read the
 # header note.
-#Sun Apr 14 19:10:01 IDT 2024
-sdk.dir=C\:\\Users\\DELL\\AppData\\Local\\Android\\Sdk
+#Wed Apr 17 15:36:53 IDT 2024
+sdk.dir=C\:\\Users\\nirmi\\AppData\\Local\\Android\\Sdk
Index: app/src/main/java/com/example/foodtruck/database/dao/PlaceDao.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/database/dao/PlaceDao.kt b/app/src/main/java/com/example/foodtruck/database/dao/PlaceDao.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/database/dao/PlaceDao.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,27 +0,0 @@
-package com.example.foodtruck.database.dao
-
-import androidx.lifecycle.LiveData
-import androidx.room.Dao
-import androidx.room.Insert
-import androidx.room.Query
-import androidx.room.Update
-import com.example.foodtruck.database.entities.Place
-
-
-@Dao
-interface PlaceDao {
-    @Insert
-    fun insertPlace(place: Place)
-    @Query("SELECT * FROM places")
-    fun getAllPlaces(): LiveData<List<Place>>
-
-    @Query("SELECT * FROM places WHERE id = :placeId")
-    fun getPlaceById(placeId: Int): LiveData<Place>
-
-    @Query("SELECT * FROM places WHERE name = :placeName")
-    fun getPlaceById(placeName: String): LiveData<Place>
-
-    @Update
-    suspend fun updatePlace(place: Place)
-
-}
\ No newline at end of file
Index: app/src/androidTest/java/com/example/foodtruck/ExampleInstrumentedTest.kt
===================================================================
diff --git a/app/src/androidTest/java/com/example/foodtruck/ExampleInstrumentedTest.kt b/app/src/androidTest/java/com/example/foodtruck/ExampleInstrumentedTest.kt
deleted file mode 100644
--- a/app/src/androidTest/java/com/example/foodtruck/ExampleInstrumentedTest.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,24 +0,0 @@
-package com.example.foodtruck
-
-import androidx.test.platform.app.InstrumentationRegistry
-import androidx.test.ext.junit.runners.AndroidJUnit4
-
-import org.junit.Test
-import org.junit.runner.RunWith
-
-import org.junit.Assert.*
-
-/**
- * Instrumented test, which will execute on an Android device.
- *
- * See [testing documentation](http://d.android.com/tools/testing).
- */
-@RunWith(AndroidJUnit4::class)
-class ExampleInstrumentedTest {
-    @Test
-    fun useAppContext() {
-        // Context of the app under test.
-        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
-        assertEquals("com.example.foodtruck", appContext.packageName)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/profile/ProfileFragment.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/profile/ProfileFragment.kt b/app/src/main/java/com/example/foodtruck/profile/ProfileFragment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/profile/ProfileFragment.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,168 +0,0 @@
-package com.example.foodtruck.profile
-
-import android.content.Intent
-import android.net.Uri
-import android.os.Bundle
-import android.util.Log
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.Button
-import android.widget.ImageView
-import android.widget.TextView
-import androidx.fragment.app.Fragment
-import androidx.fragment.app.activityViewModels
-import androidx.fragment.app.viewModels
-import androidx.navigation.fragment.findNavController
-import androidx.recyclerview.widget.LinearLayoutManager
-import androidx.recyclerview.widget.RecyclerView
-import com.example.foodtruck.R
-import com.example.foodtruck.Welcome
-import com.example.foodtruck.shared.SharedViewModel
-import com.google.firebase.auth.FirebaseAuth
-import com.squareup.picasso.Picasso
-import de.hdodenhof.circleimageview.CircleImageView
-
-
-
-
-class ProfileFragment : Fragment() , CommentAdapter.EditClickListener, CommentAdapter.DeleteClickListener{
-
-    private val viewModel: ProfileViewModel by activityViewModels()
-    private lateinit var commentRecyclerView: RecyclerView
-    private lateinit var profileImageView: CircleImageView
-    private lateinit var nameTextView: TextView
-    private lateinit var emailTextView: TextView
-    private lateinit var logoutButton: Button
-    private lateinit var editProfileButton: ImageView
-    private lateinit var auth: FirebaseAuth
-
-    private var currentName: String? = null
-    private var currentProfilePicUrl: String? = null
-
-    override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        val view: View = inflater.inflate(
-            R.layout.fragment_profile, container, false
-        )
-        profileImageView = view.findViewById(R.id.profileImageView)
-        nameTextView=view.findViewById(R.id.nameTextView)
-        emailTextView=view.findViewById(R.id.emailTextView)
-        logoutButton=view.findViewById(R.id.logoutButton)
-        editProfileButton=view.findViewById(R.id.editProfileButton)
-        // Initialize RecyclerView
-        commentRecyclerView = view.findViewById(R.id.userCommentRecyclerView)
-        commentRecyclerView.layoutManager = LinearLayoutManager(requireContext())
-        return view
-    }
-
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-        observeProfilePhoto()
-        observeUserData()
-        observeUserComments()
-        auth = FirebaseAuth.getInstance()
-        logoutButton.setOnClickListener {
-            logoutUser()
-        }
-
-        editProfileButton.setOnClickListener {
-            editProfile()
-        }
-        // Fetch and display profile photo
-        val defaultPhotoResourceId = R.drawable.profile_photo_placeholder
-        val defaultPhotoUri = Uri.parse("android.resource://${requireContext().packageName}/$defaultPhotoResourceId")
-
-        viewModel.fetchProfilePhoto(defaultPhotoUri)
-        viewModel.fetchUserName()
-        viewModel.fetchUserEmail()
-        viewModel.fetchUserComments()
-    }
-
-    private fun observeUserComments() {
-        viewModel.userComments.observe(viewLifecycleOwner) { comments ->
-            // Update RecyclerView with the list of comments
-            commentRecyclerView.adapter = CommentAdapter(comments).apply {
-                editClickListener = this@ProfileFragment
-                deleteClickListener = this@ProfileFragment
-            }
-        }
-    }
-
-    private fun observeProfilePhoto() {
-        viewModel.profilePhotoUrl.observe(viewLifecycleOwner) { photoUrl ->
-            Picasso.get()
-                .load(photoUrl)
-                .placeholder(R.drawable.profile_photo_placeholder) // Placeholder image while loading
-                .error(R.drawable.profile_photo_placeholder) // Image to show in case of error
-                .into(profileImageView as ImageView)
-        }
-    }
-
-    private fun observeUserData() {
-        viewModel.userName.observe(viewLifecycleOwner) { name ->
-            Log.d("TAG", "observeUserData: $name")
-            // Update UI with user's name
-            nameTextView.text = name
-            currentName=name
-        }
-
-        val userEmail = viewModel.fetchUserEmail()
-        // Update UI with user's email
-        emailTextView.text = userEmail
-    }
-
-
-    private fun logoutUser() {
-        auth.signOut()
-        // navigate the user to welcome activity
-        val intent = Intent(requireContext(), Welcome::class.java)
-        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
-        startActivity(intent)
-
-    }
-    private fun editProfile() {
-        val dialogFragment = EditProfileDialogFragment().apply {
-            arguments = Bundle().apply {
-                putString("currentName", currentName)
-                putString("currentProfilePicUrl", currentProfilePicUrl)
-            }
-        }
-        dialogFragment.show(parentFragmentManager, "EditProfileDialogFragment")
-    }
-
-    override fun onEditClick(position: Int) {
-        // Retrieve the comment at the given position
-        val comment = viewModel.userComments.value?.get(position)
-        // Open a dialog fragment to edit the comment
-//        comment?.let {
-//            val action = ProfileFragmentDirections.actionProfileFragmentToEditCommentDialogFragment(commentId = it.commentId)
-//            findNavController().navigate(action)
-//        }
-        // Open a dialog fragment to edit the comment
-        comment?.let {
-            val args = Bundle().apply {
-                putString("commentId", it.commentId)
-            }
-
-            val editCommentDialogFragment = EditCommentDialogFragment().apply {
-                arguments = args
-            }
-
-            editCommentDialogFragment.show(parentFragmentManager, "EditCommentDialogFragment")
-        }
-    }
-
-    override fun onDeleteClick(position: Int) {
-        // Retrieve the comment at the given position
-        val comment = viewModel.userComments.value?.get(position)
-
-        //delete the comment from the database
-        comment?.let {
-            viewModel.deleteComment(comment.commentId)
-        }
-    }
-
-}
Index: app/src/main/java/com/example/foodtruck/places/PlaceFragment.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/places/PlaceFragment.kt b/app/src/main/java/com/example/foodtruck/places/PlaceFragment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/places/PlaceFragment.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,50 +0,0 @@
-package com.example.foodtruck.places
-
-
-import android.os.Bundle
-import android.util.Log
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import androidx.fragment.app.Fragment
-import androidx.fragment.app.viewModels
-import com.example.foodtruck.databinding.FragmentPlaceBinding
-
-
-class PlaceFragment : Fragment() {
-
-    private var _binding: FragmentPlaceBinding? = null
-    private val binding get() = _binding!!
-
-    private val viewModel: PlaceViewModel by viewModels()
-
-    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
-        _binding = FragmentPlaceBinding.inflate(inflater, container, false)
-        return binding.root
-    }
-
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-        arguments?.getInt("placeId")?.let { placeId ->
-            viewModel.getPlaceById(placeId).observe(viewLifecycleOwner) { place ->
-                place?.let {
-                    binding.textViewPlaceName.text = it.name
-                    binding.textViewPlaceAddress.text = it.address
-                    binding.textViewPlaceDescription.text = it.description
-//                    viewModel.fetchPlaceRating(it) // Fetch rating for the place
-                    /*
-                    Picasso.get().invalidate(it.placePhoto)
-                    Picasso.get()
-                        .load(it.placePhoto)
-                        .into(binding.imageViewPhoto as ImageView)*/
-                }
-            }
-        }
-    }
-
-
-    override fun onDestroyView() {
-        super.onDestroyView()
-        _binding = null
-    }
-}
Index: app/src/main/java/com/example/foodtruck/profile/CommentAdapter.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/profile/CommentAdapter.kt b/app/src/main/java/com/example/foodtruck/profile/CommentAdapter.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/profile/CommentAdapter.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,63 +0,0 @@
-package com.example.foodtruck.profile
-
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.ImageButton
-import android.widget.ImageView
-import android.widget.TextView
-import androidx.recyclerview.widget.RecyclerView
-import com.example.foodtruck.R
-import com.squareup.picasso.Picasso
-
-
-// RecyclerView adapter
-//responsible for managing the items in the RecyclerView
-class CommentAdapter(private val comments: List<Comment>) : RecyclerView.Adapter<CommentAdapter.CommentViewHolder>() {
-    // ViewHolder class
-    // Define interfaces for click listeners
-    interface EditClickListener {
-        fun onEditClick(position: Int)
-    }
-
-    interface DeleteClickListener {
-        fun onDeleteClick(position: Int)
-    }
-    // Define editClickListener and deleteClickListener variables
-    var editClickListener: EditClickListener? = null
-    var deleteClickListener: DeleteClickListener? = null
-
-    //nested class that represents the view for each item in the RecyclerView
-    class CommentViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
-        // Bind data to views
-        fun bind(comment: Comment) {
-            // Bind comment data to views in the layout
-            itemView.findViewById<TextView>(R.id.placeNameTextView).text = comment.placeName
-            itemView.findViewById<TextView>(R.id.commentTextView).text = comment.comment
-            // Load image using Picasso or Glide
-            Picasso.get().load(comment.photo).into(itemView.findViewById<ImageView>(R.id.photoImageView))
-        }
-    }
-
-    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CommentViewHolder {
-        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_comment, parent, false)
-        return CommentViewHolder(view)
-    }
-
-    override fun onBindViewHolder(holder: CommentViewHolder, position: Int) {
-        holder.bind(comments[position])
-        // Set click listeners for edit and delete buttons
-        holder.itemView.findViewById<ImageButton>(R.id.editButton).setOnClickListener {
-            editClickListener?.onEditClick(position)
-        }
-
-        holder.itemView.findViewById<ImageButton>(R.id.deleteButton).setOnClickListener {
-            deleteClickListener?.onDeleteClick(position)
-        }
-    }
-
-    override fun getItemCount(): Int {
-        return comments.size
-    }
-}
-
Index: app/src/main/java/com/example/foodtruck/database/entities/Post.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/database/entities/Post.kt b/app/src/main/java/com/example/foodtruck/database/entities/Post.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/database/entities/Post.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,14 +0,0 @@
-package com.example.foodtruck.database.entities
-
-import androidx.room.Entity
-import androidx.room.PrimaryKey
-import java.util.Date
-
-@Entity(tableName = "posts")
-data class Post(
-    @PrimaryKey(autoGenerate = true) val id: Int=0,
-    val userId: String,
-    val comment: String,
-    val photo: String,
-    val placeName: String
-)
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/posts/FirebasePost.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/posts/FirebasePost.kt b/app/src/main/java/com/example/foodtruck/posts/FirebasePost.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/posts/FirebasePost.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,8 +0,0 @@
-package com.example.foodtruck.posts
-
-data class FirebasePost(
-    val userId: String? = null,
-    val comment: String? = null,
-    val photo: String? = null,
-    val placeName: String? = null
-)
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/login/LoginActivity.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/login/LoginActivity.kt b/app/src/main/java/com/example/foodtruck/login/LoginActivity.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/login/LoginActivity.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,19 +0,0 @@
-package com.example.foodtruck.login
-
-import android.os.Bundle
-
-import androidx.appcompat.app.AppCompatActivity
-
-import com.example.foodtruck.R
-
-
-class LoginActivity : AppCompatActivity() {
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_login)
-
-        supportFragmentManager.beginTransaction()
-            .replace(R.id.fragment_container, LoginFragment())
-            .commit()
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/profile/Comment.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/profile/Comment.kt b/app/src/main/java/com/example/foodtruck/profile/Comment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/profile/Comment.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,8 +0,0 @@
-package com.example.foodtruck.profile
-
-data class Comment(
-    val commentId: String,
-    val placeName: String,
-    val comment: String,
-    var photo: String
-)
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/allPosts/CommentAdapter.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/allPosts/CommentAdapter.kt b/app/src/main/java/com/example/foodtruck/allPosts/CommentAdapter.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/allPosts/CommentAdapter.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,73 +0,0 @@
-package com.example.foodtruck.allPosts
-
-import android.view.LayoutInflater
-import android.view.ViewGroup
-import androidx.recyclerview.widget.DiffUtil
-import androidx.recyclerview.widget.ListAdapter
-import androidx.recyclerview.widget.RecyclerView
-import com.example.foodtruck.database.entities.Post
-import com.example.foodtruck.databinding.FragmentCommentItemBinding
-import com.example.foodtruck.posts.FirebasePost
-import com.google.firebase.database.DataSnapshot
-import com.google.firebase.database.DatabaseError
-import com.google.firebase.database.FirebaseDatabase
-import com.google.firebase.database.ValueEventListener
-import com.squareup.picasso.Picasso
-
-class CommentAdapter : ListAdapter<Pair<String, FirebasePost>, CommentAdapter.CommentViewHolder>(DIFF_CALLBACK) {
-
-    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CommentViewHolder {
-        val binding = FragmentCommentItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)
-        return CommentViewHolder(binding)
-    }
-
-    override fun onBindViewHolder(holder: CommentViewHolder, position: Int) {
-        holder.bind(getItem(position).second)
-    }
-
-    class CommentViewHolder(private val binding: FragmentCommentItemBinding) : RecyclerView.ViewHolder(binding.root) {
-        fun bind(firebasePost: FirebasePost) {
-            // Set the comment text and photo
-            binding.commentTextView.text = firebasePost.comment
-            firebasePost.photo?.let {
-                if (it.isNotEmpty()) {
-                    Picasso.get().load(it).into(binding.commentPhotoImageView)
-                }
-            }
-
-            // Replace the userId with fullName by querying the "Users" node
-            val usersRef = FirebaseDatabase.getInstance().getReference("Users")
-            firebasePost.userId?.let { userId ->
-                usersRef.orderByChild("userId").equalTo(userId)
-                    .addListenerForSingleValueEvent(object : ValueEventListener {
-                        override fun onDataChange(snapshot: DataSnapshot) {
-                            for (userSnapshot in snapshot.children) {
-                                // Assuming the structure of your user's data is as in the "Users" node
-                                val fullName = userSnapshot.child("fullName").getValue(String::class.java)
-                                binding.commentUserIdTextView.text = fullName ?: "Unknown User"
-                                break // Assuming userId is unique, break after finding the first match
-                            }
-                        }
-
-                        override fun onCancelled(error: DatabaseError) {
-                            // Handle error
-                            binding.commentUserIdTextView.text = "Error loading user"
-                        }
-                    })
-            }
-        }
-    }
-
-
-    companion object {
-        private val DIFF_CALLBACK = object : DiffUtil.ItemCallback<Pair<String, FirebasePost>>() {
-            override fun areItemsTheSame(oldItem: Pair<String, FirebasePost>, newItem: Pair<String, FirebasePost>): Boolean {
-                return oldItem.first == newItem.first // Compare the Firebase keys
-            }
-
-            override fun areContentsTheSame(oldItem: Pair<String, FirebasePost>, newItem: Pair<String, FirebasePost>): Boolean {
-                return oldItem.second == newItem.second // Compare the contents of the FirebasePost objects
-            }
-        }
-    }
-}
Index: app/src/main/java/com/example/foodtruck/database/FoodTruckDatabase.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/database/FoodTruckDatabase.kt b/app/src/main/java/com/example/foodtruck/database/FoodTruckDatabase.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/database/FoodTruckDatabase.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,17 +0,0 @@
-package com.example.foodtruck.database
-
-import androidx.room.Database
-import androidx.room.RoomDatabase
-import com.example.foodtruck.database.dao.PlaceDao
-import com.example.foodtruck.database.dao.PostDao
-import com.example.foodtruck.database.dao.UserDao
-import com.example.foodtruck.database.entities.Place
-import com.example.foodtruck.database.entities.Post
-import com.example.foodtruck.database.entities.User
-
-@Database(entities = [User::class, Place::class, Post::class], version = 7)
-abstract class FoodTruckDatabase : RoomDatabase() {
-    abstract fun userDao(): UserDao
-    abstract fun placeDao(): PlaceDao
-    abstract fun postDao(): PostDao
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/database/entities/Place.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/database/entities/Place.kt b/app/src/main/java/com/example/foodtruck/database/entities/Place.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/database/entities/Place.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,14 +0,0 @@
-package com.example.foodtruck.database.entities
-
-import androidx.room.Entity
-import androidx.room.PrimaryKey
-
-@Entity(tableName = "places")
-data class Place(
-    @PrimaryKey(autoGenerate = true) val id: Int = 0,
-    val name: String,
-    val address: String,
-    val description: String,
-    val placePhoto: String,
-    var rating: Float = 0f
-)
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/profile/ProfileViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/profile/ProfileViewModel.kt b/app/src/main/java/com/example/foodtruck/profile/ProfileViewModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/profile/ProfileViewModel.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,232 +0,0 @@
-package com.example.foodtruck.profile
-
-import android.net.Uri
-import android.util.Log
-import android.widget.Toast
-
-import androidx.lifecycle.LiveData
-import androidx.lifecycle.MutableLiveData
-import androidx.lifecycle.ViewModel
-import com.example.foodtruck.signup.UserProperties
-import com.google.firebase.auth.FirebaseAuth
-import com.google.firebase.database.DataSnapshot
-import com.google.firebase.database.DatabaseError
-import com.google.firebase.database.FirebaseDatabase
-import com.google.firebase.database.ValueEventListener
-import com.google.firebase.storage.FirebaseStorage
-import java.util.UUID
-
-
-class ProfileViewModel : ViewModel() {
-
-    private val _profilePhotoUrl = MutableLiveData<String>()
-    val profilePhotoUrl: LiveData<String> get() = _profilePhotoUrl
-
-    private val _userName = MutableLiveData<String>()
-    val userName: LiveData<String> get() = _userName
-
-    private val _userComments = MutableLiveData<List<Comment>>()
-    val userComments: LiveData<List<Comment>> get() = _userComments
-
-    private val storage = FirebaseStorage.getInstance()
-    private val database = FirebaseDatabase.getInstance()
-    private val currentUser = FirebaseAuth.getInstance().currentUser
-
-    fun fetchUserComments() {
-        Log.d("TAG","hello")
-        currentUser?.uid?.let { userId ->
-            val commentsRef = database.getReference("posts").orderByChild("userId").equalTo(userId)
-            commentsRef.addListenerForSingleValueEvent(object : ValueEventListener {
-                override fun onDataChange(snapshot: DataSnapshot) {
-                    val commentsList = mutableListOf<Comment>()
-                    for (commentSnapshot in snapshot.children) {
-                        val commentId = commentSnapshot.key ?: ""
-                        val placeName = commentSnapshot.child("placeName").getValue(String::class.java) ?: ""
-                        val commentText = commentSnapshot.child("comment").getValue(String::class.java) ?: ""
-                        val photoUrl = commentSnapshot.child("photo").getValue(String::class.java) ?: ""
-                        val comment = Comment(commentId,placeName, commentText, photoUrl)
-                        commentsList.add(comment)
-                    }
-                    Log.d("TAG","commentsList:$commentsList")
-                    _userComments.value = commentsList
-                }
-
-                override fun onCancelled(error: DatabaseError) {
-                    // Handle database error
-                }
-            })
-        }
-    }
-
-    fun fetchProfilePhoto(defaultPhotoUri: Uri) {
-        if (currentUser != null) {
-            val userId = currentUser.uid
-            val photoRef = storage.reference.child("profile_photos/$userId.jpg")
-
-            // Check if the profile photo exists
-            photoRef.metadata.addOnSuccessListener { metadata ->
-                if (metadata != null && metadata.sizeBytes > 0) {
-                    // Profile photo exists, fetch its download URL
-                    photoRef.downloadUrl.addOnSuccessListener { uri ->
-                        _profilePhotoUrl.value = uri.toString()
-                    }.addOnFailureListener {
-                        // Handle failure to fetch download URL
-                        _profilePhotoUrl.value = defaultPhotoUri.toString()
-                    }
-                } else {
-                    // Profile photo doesn't exist, use default photo
-                    _profilePhotoUrl.value = defaultPhotoUri.toString()
-                }
-            }.addOnFailureListener {
-                // Handle failure to retrieve metadata
-                _profilePhotoUrl.value = defaultPhotoUri.toString()
-            }
-        } else {
-            // Handle the case when currentUser is null (user not logged in)
-            println("currentUser is null")
-        }
-    }
-
-
-    fun fetchUserName() {
-        currentUser?.uid?.let { userId ->
-            val databaseRef = FirebaseDatabase.getInstance().getReference("Users").child(userId)
-            databaseRef.addListenerForSingleValueEvent(object : ValueEventListener {
-                override fun onDataChange(snapshot: DataSnapshot) {
-                    val name = snapshot.child("fullName").value.toString()
-                    // Update UI with the retrieved name
-                    _userName.value = name
-                }
-
-                override fun onCancelled(error: DatabaseError) {
-                    // Handle database error
-
-                }
-            })
-        }
-    }
-    fun fetchUserEmail(): String? {
-        return currentUser?.email
-    }
-    fun uploadProfileImage(userMetaData: UserMetaData, imageUri: Uri) {
-        val userId = currentUser?.uid
-        userId?.let {
-            val photoRef = storage.reference.child("profile_photos/$userId.jpg")
-            photoRef.putFile(imageUri)
-                .addOnSuccessListener {
-                    // Photo upload successful, fetch its download URL
-                    photoRef.downloadUrl.addOnSuccessListener { uri ->
-                        // Update user's profile photo URL in Firebase Realtime Database
-                        val databaseRef = FirebaseDatabase.getInstance().getReference("Users").child(userId)
-                        databaseRef.child("profilePhoto").setValue(uri.toString())
-                            .addOnSuccessListener {
-                                // Profile photo URL updated successfully
-                                _profilePhotoUrl.value = uri.toString()
-                            }.addOnFailureListener {
-                                // Handle failure to update profile photo URL in database
-
-
-                            }
-                    }
-                }
-                .addOnFailureListener {
-                    // Handle failure to upload photo
-                    Log.d("TAG", "Failed to upload profile photo: ${it.message}")
-                }
-        }
-    }
-
-    fun updateUserName(userMetaData: UserMetaData, newName: String) {
-        val userId = currentUser?.uid
-        userId?.let {
-            val databaseRef = FirebaseDatabase.getInstance().getReference("Users").child(userId)
-            databaseRef.child("fullName").setValue(newName)
-                .addOnSuccessListener {
-                    // User name updated successfully
-                    Log.d("TAG", "_userName: ${_userName.value}")
-                    _userName.value = newName
-                    Log.d("TAG", "_userName: ${_userName.value}")
-                }
-                .addOnFailureListener {
-                    // Handle failure to update user name
-                }
-        }
-    }
-
-    fun deleteComment(commentId: String) {
-        // Get a reference to the comments node in the database
-        val commentsRef = database.getReference("posts")
-
-        // Delete the comment with the specified commentId
-        commentsRef.child(commentId).removeValue()
-            .addOnSuccessListener {
-                // Comment deleted successfully
-                Log.d("ProfileViewModel", "Comment deleted successfully")
-                // Remove the deleted comment from the userComments LiveData
-                val updatedCommentsList = _userComments.value.orEmpty().toMutableList()
-                updatedCommentsList.removeAll { it.commentId == commentId }
-                _userComments.value = updatedCommentsList
-            }
-            .addOnFailureListener { exception ->
-                // Failed to delete comment
-                Log.e("ProfileViewModel", "Error deleting comment", exception)
-            }
-
-    }
-
-    fun updateComment(updatedComment: Comment) {
-        // Get a reference to the comments node in the database
-        val commentsRef = database.getReference("posts")
-
-        // Create a map to hold the updated properties
-        val commentUpdates = HashMap<String, Any>()
-
-        // Update the specific properties you want to change
-        commentUpdates["comment"] = updatedComment.comment
-        commentUpdates["photo"] = updatedComment.photo
-        // Update the comment with the specified commentId
-        commentsRef.child(updatedComment.commentId).updateChildren(commentUpdates)
-            .addOnSuccessListener {
-                // Comment updated successfully
-                Log.d("ProfileViewModel", "Comment updated successfully")
-
-                // Update the comment in the userComments LiveData
-                val updatedCommentsList = _userComments.value.orEmpty().toMutableList()
-                val index = updatedCommentsList.indexOfFirst { it.commentId == updatedComment.commentId }
-                if (index != -1) {
-                    updatedCommentsList[index] = updatedComment
-                    _userComments.value = updatedCommentsList
-                }
-            }
-            .addOnFailureListener { exception ->
-                // Failed to update comment
-                Log.e("ProfileViewModel", "Error updating comment", exception)
-            }
-    }
-
-    fun uploadImageToFirebaseStorage(imageUri: Uri, callback: (String) -> Unit) {
-        val storageRef = FirebaseStorage.getInstance().reference
-        val imagesRef = storageRef.child("images/${UUID.randomUUID()}_${imageUri.lastPathSegment}")
-        val uploadTask = imagesRef.putFile(imageUri)
-
-        uploadTask.continueWithTask { task ->
-            if (!task.isSuccessful) {
-                task.exception?.let {
-                    throw it
-                }
-            }
-            imagesRef.downloadUrl
-        }.addOnCompleteListener { task ->
-            if (task.isSuccessful) {
-                val downloadUri = task.result
-                callback(downloadUri.toString())
-            } else {
-                // Handle the error
-                task.exception?.message?.let {
-                    // Show error message to the user
-                }
-            }
-        }
-    }
-
-}
Index: app/src/main/java/com/example/foodtruck/places/PlaceViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/places/PlaceViewModel.kt b/app/src/main/java/com/example/foodtruck/places/PlaceViewModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/places/PlaceViewModel.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,17 +0,0 @@
-package com.example.foodtruck.places
-
-import android.app.Application
-import androidx.lifecycle.AndroidViewModel
-import androidx.lifecycle.LiveData
-import com.example.foodtruck.database.DatabaseInstance
-import com.example.foodtruck.database.entities.Place
-
-class PlaceViewModel(application: Application) : AndroidViewModel(application) {
-    private val placeDao = DatabaseInstance.getDatabase(application).placeDao()
-
-
-    fun getPlaceById(placeId: Int): LiveData<Place> {
-        return placeDao.getPlaceById(placeId)
-    }
-
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/placesApiService/PlacesApiService.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/placesApiService/PlacesApiService.kt b/app/src/main/java/com/example/foodtruck/placesApiService/PlacesApiService.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/placesApiService/PlacesApiService.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,16 +0,0 @@
-package com.example.foodtruck.placesApiService
-
-import retrofit2.Call
-import retrofit2.http.GET
-import retrofit2.http.Query
-
-interface PlacesApiService {
-    @GET("maps/api/place/findplacefromtext/json")
-    fun findPlaceFromText(
-        @Query("input") input: String,
-        @Query("inputtype") inputType: String = "textquery",
-        @Query("fields") fields: String = "name,rating",
-        @Query("key") apiKey: String
-
-    ): Call<PlaceResponse>
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/database/DatabaseInstance.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/database/DatabaseInstance.kt b/app/src/main/java/com/example/foodtruck/database/DatabaseInstance.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/database/DatabaseInstance.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,24 +0,0 @@
-package com.example.foodtruck.database
-
-import android.content.Context
-import androidx.room.Room
-
-object DatabaseInstance {
-
-    @Volatile
-    private var INSTANCE: FoodTruckDatabase? = null
-
-    fun getDatabase(context: Context): FoodTruckDatabase {
-        return INSTANCE ?: synchronized(this) {
-            val instance = Room.databaseBuilder(
-                context.applicationContext,
-                FoodTruckDatabase::class.java,
-                "foodtruck_database"
-            )
-                .fallbackToDestructiveMigration()
-                .build()
-            INSTANCE = instance
-            instance
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/utils/Utils.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/utils/Utils.kt b/app/src/main/java/com/example/foodtruck/utils/Utils.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/utils/Utils.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,37 +0,0 @@
-package com.example.foodtruck.utils
-
-import android.app.Application
-import com.example.foodtruck.database.DatabaseInstance
-import com.example.foodtruck.database.entities.Place
-import com.google.firebase.storage.FirebaseStorage
-import kotlinx.coroutines.CoroutineScope
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.launch
-
-object Utils {
-    fun initializeDatabaseWithPlace(application: Application, imageUrl: String, name: String, address: String, description: String) {
-
-        val storageReference = FirebaseStorage.getInstance().getReference(imageUrl)
-        // Start the download of the URL
-        storageReference.downloadUrl.addOnSuccessListener { downloadUri ->
-            val imageUrl = downloadUri.toString()
-            // Directly use the imageUrl parameter
-            val place = Place(
-                name = name,
-                address = address,
-                description = description,
-                placePhoto = imageUrl,
-                rating = 0f // Assuming the initial rating is 0 for all new places
-            )
-
-            // Get your Room database and Dao
-            val db = DatabaseInstance.getDatabase(application)
-            val placeDao = db.placeDao()
-
-            CoroutineScope(Dispatchers.IO).launch {
-                placeDao.insertPlace(place)
-            }
-        }
-    }
-
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/login/LoginModel.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/login/LoginModel.kt b/app/src/main/java/com/example/foodtruck/login/LoginModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/login/LoginModel.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,3 +0,0 @@
-package com.example.foodtruck.login
-
-data class UserCredentials(val email: String, val password: String)
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/posts/PostViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/posts/PostViewModel.kt b/app/src/main/java/com/example/foodtruck/posts/PostViewModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/posts/PostViewModel.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,54 +0,0 @@
-package com.example.foodtruck.posts
-
-import android.app.Application
-import android.util.Log
-import androidx.lifecycle.AndroidViewModel
-import androidx.lifecycle.viewModelScope
-import com.example.foodtruck.database.DatabaseInstance
-import com.example.foodtruck.database.entities.Post
-import com.google.firebase.database.FirebaseDatabase
-import kotlinx.coroutines.launch
-import kotlinx.coroutines.tasks.await
-import kotlinx.coroutines.Dispatchers
-
-class PostViewModel(application: Application) : AndroidViewModel(application) {
-
-    private val firebaseDatabase = FirebaseDatabase.getInstance()
-
-    fun createPost(
-        userId: String,
-        comment: String,
-        photoUrl: String,
-        placeName: String,
-        onSuccess: () -> Unit,  // onSuccess lambda parameter
-        onFailure: (Exception) -> Unit  // onFailure lambda parameter
-    ) {
-        viewModelScope.launch(Dispatchers.IO) {
-            try {
-                // Create the Post object
-                val newPost = Post(
-                    userId = userId,
-                    comment = comment,
-                    photo = photoUrl,
-                    placeName = placeName
-                )
-
-                // Insert the new post into the Room database
-                val db = DatabaseInstance.getDatabase(getApplication<Application>())
-                val postDao = db.postDao()
-                postDao.insertPost(newPost)
-
-                // Insert the new post into Firebase and wait for completion
-                val postsRef = firebaseDatabase.getReference("posts")
-                val newPostRef = postsRef.push()
-                newPostRef.setValue(newPost).await()
-
-                // If successful, invoke onSuccess callback
-                launch(Dispatchers.Main) { onSuccess() }
-            } catch (e: Exception) {
-                // If there's an error, invoke onFailure callback
-                launch(Dispatchers.Main) { onFailure(e) }
-            }
-        }
-    }
-}
Index: app/src/main/java/com/example/foodtruck/login/LoginFragment.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/login/LoginFragment.kt b/app/src/main/java/com/example/foodtruck/login/LoginFragment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/login/LoginFragment.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,139 +0,0 @@
-package com.example.foodtruck.login
-
-import android.content.Intent
-import android.os.Bundle
-import android.util.Log
-import android.util.Patterns
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.Button
-import android.widget.EditText
-import android.widget.ProgressBar
-import android.widget.TextView
-import android.widget.Toast
-import androidx.fragment.app.Fragment
-import androidx.fragment.app.activityViewModels
-import androidx.lifecycle.ViewModelProvider
-import androidx.navigation.fragment.findNavController
-import com.example.foodtruck.MainActivity
-import com.example.foodtruck.R
-import com.example.foodtruck.homePage.HomePageFragment
-import com.example.foodtruck.profile.ProfileFragment
-import com.example.foodtruck.shared.SharedViewModel
-import com.example.foodtruck.signup.SignUpActivity
-import com.example.foodtruck.signup.UserProperties
-
-
-
-class LoginFragment : Fragment() {
-    private val loginViewModel: LoginViewModel by activityViewModels()
-    private lateinit var emailInput : EditText
-    private lateinit var passwordInput : EditText
-    private lateinit var loginButton: Button
-    private lateinit var signupLink:TextView
-    private lateinit var progressBarLogin: ProgressBar
-    private lateinit var sharedViewModel: SharedViewModel
-//    private val sharedViewModel: SharedViewModel by activityViewModels()
-
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?, savedInstanceState: Bundle?
-    ): View {
-
-        val view: View = inflater.inflate(
-            R.layout.fragment_login, container, false
-        )
-        emailInput = view.findViewById(R.id.emailInput)
-        passwordInput = view.findViewById(R.id.passwordInput)
-        loginButton = view.findViewById(R.id.login_button)
-        signupLink = view.findViewById<TextView>(R.id.signup_link)
-        progressBarLogin = view.findViewById(R.id.progress_bar)
-        sharedViewModel = ViewModelProvider(requireActivity())[SharedViewModel::class.java]
-
-        handleLoginClick(loginButton)
-        handleSignUpClick(signupLink)
-        observeLoginResult()
-
-        return view
-    }
-
-    private fun handleSignUpClick(signupLink: TextView) {
-        signupLink.setOnClickListener {
-            val intent = Intent(requireContext(), SignUpActivity::class.java)
-            startActivity(intent)
-        }
-    }
-
-
-
-    override fun onResume() {
-        resetParameters()
-        super.onResume()
-    }
-
-    private fun observeLoginResult() {
-        loginViewModel.loginResult.observe(viewLifecycleOwner) { result: Pair<HashMap<String,Any>, String> ->
-            if (result.first.isNotEmpty()) {
-                updateSharedViewModel(result)
-                Log.d("TAG","result:${result}")
-//                closeKeyboard(requireContext(), requireView())
-                // Navigate to the ProfileFragment using an explicit intent
-                //findNavController().navigate(R.id.action_loginFragment_to_homePageFragment)
-                // In LoginActivity, after a successful login
-                val intent = Intent(requireActivity(), MainActivity::class.java)
-                startActivity(intent)
-//                val transaction = requireActivity().supportFragmentManager.beginTransaction()
-//                transaction.replace(R.id.fragment_container, HomePageFragment())
-//                transaction.addToBackStack(null) // Optional: Allows the user to navigate back to the previous fragment
-//                transaction.commit()
-                Toast.makeText(requireContext(), "login success", Toast.LENGTH_SHORT).show()
-            } else {
-                Toast.makeText(requireContext(), "login faild", Toast.LENGTH_SHORT).show()
-            }
-            progressBarLogin.visibility = View.GONE
-        }
-    }
-    private fun updateSharedViewModel(result: Pair<HashMap<String, Any>, String>) {
-        sharedViewModel.userMetaData.email = result.second
-        sharedViewModel.userMetaData.fullName = result.first["fullName"].toString()
-        sharedViewModel.userMetaData.profilePhoto = result.first["profilePhoto"].toString()
-    }
-
-    private fun handleLoginClick(loginButton:Button) {
-        loginButton.setOnClickListener {
-            val credentials = UserCredentials(emailInput.text.toString(), passwordInput.text.toString())
-            if (checkCredentials(credentials, emailInput, passwordInput)) {
-//                manageViews(emailInput, passwordInput, loginButton, signupButton, messageBox, mode="GONE")
-                progressBarLogin.visibility = View.VISIBLE
-                loginViewModel.loginUser(credentials)
-            }
-        }
-    }
-
-
-    private fun resetParameters(){
-        emailInput.text.clear()
-        passwordInput.text.clear()
-    }
-
-    //can be in utils - validationFunction
-    private fun checkCredentials(
-        credentials: UserCredentials, emailInput: EditText,
-        passwordInput:EditText): Boolean{
-        if (credentials.email.isEmpty()){
-            emailInput.error = "Enter a email"
-        }
-        else if (credentials.password.isEmpty()){
-            passwordInput.error = "Enter a password"
-        }
-        else if (credentials.password.length <=6) {
-            passwordInput.error = "Password need to more than 6 characters long"
-        }
-        else if (!Patterns.EMAIL_ADDRESS.matcher(credentials.email).matches()){
-            emailInput.error = "Enter valid email format"
-        }
-        else{ return true }
-        return false
-    }
-}
Index: app/src/main/java/com/example/foodtruck/database/dao/UserDao.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/database/dao/UserDao.kt b/app/src/main/java/com/example/foodtruck/database/dao/UserDao.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/database/dao/UserDao.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,18 +0,0 @@
-package com.example.foodtruck.database.dao
-
-import androidx.room.Dao
-import androidx.room.Insert
-import androidx.room.Query
-import androidx.room.Update
-import com.example.foodtruck.database.entities.User
-@Dao
-interface UserDao {
-    @Query("SELECT * FROM users WHERE id = :id")
-    fun getUserById(id: Int): User?
-    @Insert
-    fun insertUser(user: User)
-    @Update
-    fun updateUser(user: User)
-    @Query("SELECT * FROM users WHERE email = :email")
-    fun getUserByEmail(email: String): User?
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/shared/SharedViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/shared/SharedViewModel.kt b/app/src/main/java/com/example/foodtruck/shared/SharedViewModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/shared/SharedViewModel.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,10 +0,0 @@
-package com.example.foodtruck.shared
-
-import androidx.lifecycle.ViewModel
-import com.example.foodtruck.profile.UserMetaData
-
-
-class SharedViewModel : ViewModel() {
-    var userMetaData: UserMetaData = UserMetaData(fullName = "",
-        email = "", profilePhoto = "")
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/allPosts/CommentsFragment.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/allPosts/CommentsFragment.kt b/app/src/main/java/com/example/foodtruck/allPosts/CommentsFragment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/allPosts/CommentsFragment.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,85 +0,0 @@
-package com.example.foodtruck.allPosts
-
-import android.os.Bundle
-import android.util.Log
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import androidx.fragment.app.Fragment
-import androidx.navigation.fragment.findNavController
-import androidx.recyclerview.widget.LinearLayoutManager
-import com.example.foodtruck.database.entities.Post
-import com.example.foodtruck.databinding.FragmentCommentsBinding
-import com.example.foodtruck.posts.FirebasePost
-import com.google.firebase.database.DataSnapshot
-import com.google.firebase.database.DatabaseError
-import com.google.firebase.database.FirebaseDatabase
-import com.google.firebase.database.ValueEventListener
-
-class CommentsFragment : Fragment() {
-
-    private var _binding: FragmentCommentsBinding? = null
-    private val binding get() = _binding!!
-
-    private lateinit var commentAdapter: CommentAdapter
-    private lateinit var placeName: String
-
-    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
-        _binding = FragmentCommentsBinding.inflate(inflater, container, false)
-        return binding.root
-    }
-
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        arguments?.getString("placeName")?.let { placeNameArg ->
-            placeName = placeNameArg
-        }
-
-        setupRecyclerView()
-        fetchComments()
-
-        // Handle clicks on the go back icon
-        binding.goBackIcon.setOnClickListener {
-            findNavController().navigateUp()
-        }
-    }
-
-    private fun setupRecyclerView() {
-        commentAdapter = CommentAdapter()
-        binding.commentsRecyclerView.apply {
-            layoutManager = LinearLayoutManager(context)
-            adapter = commentAdapter
-        }
-    }
-
-    private fun fetchComments() {
-        Log.d("CommentsFragment", "Fetching comments for place: $placeName")
-        val databaseReference = FirebaseDatabase.getInstance().reference.child("posts")
-        databaseReference.orderByChild("placeName").equalTo(placeName)
-            .addValueEventListener(object : ValueEventListener {
-                override fun onDataChange(dataSnapshot: DataSnapshot) {
-                    val comments = dataSnapshot.children.mapNotNull {
-                        val key = it.key
-                        val post = it.getValue(FirebasePost::class.java)
-                        if (key != null && post != null) {
-                            Pair(key, post)
-                        } else {
-                            null
-                        }
-                    }
-                    commentAdapter.submitList(comments)
-                    Log.d("CommentsFragment", "Found ${comments.size} comments")
-                }
-
-                override fun onCancelled(databaseError: DatabaseError) {
-                    // Handle error
-                }
-            })
-    }
-
-    override fun onDestroyView() {
-        super.onDestroyView()
-        _binding = null
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/database/entities/User.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/database/entities/User.kt b/app/src/main/java/com/example/foodtruck/database/entities/User.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/database/entities/User.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,12 +0,0 @@
-package com.example.foodtruck.database.entities
-
-import androidx.room.Entity
-import androidx.room.PrimaryKey
-
-@Entity(tableName = "users")
-data class User (
-    @PrimaryKey(autoGenerate = true) val id: Int=0,
-    val name: String,
-    val email: String,
-    val profilePhoto: String
-)
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/Welcome.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/Welcome.kt b/app/src/main/java/com/example/foodtruck/Welcome.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/Welcome.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,59 +0,0 @@
-package com.example.foodtruck
-
-import android.content.Intent
-import android.os.Bundle
-import android.widget.Button
-import androidx.appcompat.app.AppCompatActivity
-import androidx.lifecycle.lifecycleScope
-import com.example.foodtruck.homePage.HomePageFragment
-import com.example.foodtruck.login.LoginActivity
-import com.example.foodtruck.signup.SignUpActivity
-import com.example.foodtruck.utils.Utils
-import com.google.firebase.auth.FirebaseAuth
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.launch
-
-
-class Welcome : AppCompatActivity() {
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_welcome)
-
-        // Check if a user is already logged in using Firebase Authentication
-        val currentUser = FirebaseAuth.getInstance().currentUser
-        if (currentUser != null) {
-            // User is already logged in, navigate to MainActivity
-            navigateToMainActivity()
-            return // Finish the Welcome activity to prevent it from being shown
-        }
-
-        // initialize the database with a new place
-
-        Utils.initializeDatabaseWithPlace(application, "cafeEurope.jpg", "קפה אירופה", "שדרות רוטשילד 9, תל אביב-יפו", "מסעדה צנועה עם חצר שבה מגישים מנות יצירתיות, עם תפריט בראנץ', יינות וקוקטיילים.")
-        Utils.initializeDatabaseWithPlace(application, "sunyoung.jpg", "סאן יאנג", "ברנר 14, תל אביב-יפו", "מסעדת פיוז'ן אסיאתי מודרנית שבה מגישים סושי, ארוחות בוקר מקומיות וסטייקים במתחם מסוגנן ומאוורר.")
-        Utils.initializeDatabaseWithPlace(application, "rustico.jpg", "רוסטיקו רוטשילד", "שדרות רוטשילד 15, תל אביב-יפו", "נמצאת בלב של תל אביב, ברחוב היפה והמרכזי ביותר של העיר. קחו לעצמכם פסק זמן קטן ותנו קפיצה לאיטליה באמצע היום או במהלך הערב.")
-        Utils.initializeDatabaseWithPlace(application, "mayer.jpg", "קפה מאייר", "דיזנגוף 98, תל אביב-יפו", "ביסטרו ים תיכוני המשלב בין אווירה פריזאית לחומרי גלם מעולים מאגן הים התיכון בו כל אחד יכול למצוא את עצמו בכל שעה ביום.")
-        Utils.initializeDatabaseWithPlace(application, "emesh.jpg", "אמש", "לילינבלום 30, תל אביב-יפו", "בר/מסעדה אופנתי עם תאורה דרמטית, מרפסת גדולה ותוססת בחצר ומתחם אירועים")
-
-
-        val registerButton: Button = findViewById(R.id.create_account_button)
-        val loginButton: Button = findViewById(R.id.login_button)
-
-        registerButton.setOnClickListener {
-            startActivity(Intent(this, SignUpActivity::class.java))
-            finish() // Finish the Welcome activity to make it disappear
-        }
-
-        loginButton.setOnClickListener {
-            startActivity(Intent(this, LoginActivity::class.java))
-            finish() // Finish the Welcome activity to make it disappear
-        }
-
-    }
-    private fun navigateToMainActivity() {
-        val intent = Intent(this, MainActivity::class.java)
-        startActivity(intent)
-        finish()
-    }
-}
Index: app/src/main/java/com/example/foodtruck/MainActivity.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/MainActivity.kt b/app/src/main/java/com/example/foodtruck/MainActivity.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/MainActivity.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,39 +0,0 @@
-package com.example.foodtruck
-
-import android.os.Bundle
-import androidx.appcompat.app.AppCompatActivity
-import androidx.navigation.NavController
-import androidx.navigation.findNavController
-import androidx.navigation.fragment.NavHostFragment
-import androidx.navigation.ui.NavigationUI
-import com.example.foodtruck.databinding.ActivityMainBinding // Assuming you are using View Binding
-import com.example.foodtruck.utils.Utils
-
-
-class MainActivity : AppCompatActivity() {
-
-    private lateinit var binding: ActivityMainBinding
-    private lateinit var navController: NavController
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        binding = ActivityMainBinding.inflate(layoutInflater)
-        setContentView(binding.root)
-
-        // Setup the nav controller for use with the NavHostFragment
-        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment
-        navController = navHostFragment.navController
-
-        // If you have a Toolbar, ActionBar, or BottomNavigationView, set them up with the navController here
-        // Example for a Toolbar
-        // setSupportActionBar(binding.toolbar)
-        // NavigationUI.setupActionBarWithNavController(this, navController)
-
-        // Example for BottomNavigationView
-        // NavigationUI.setupWithNavController(binding.bottomNav, navController)
-    }
-
-    override fun onSupportNavigateUp(): Boolean {
-        return navController.navigateUp() || super.onSupportNavigateUp()
-        }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/homePage/HomePageFragment.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/homePage/HomePageFragment.kt b/app/src/main/java/com/example/foodtruck/homePage/HomePageFragment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/homePage/HomePageFragment.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,65 +0,0 @@
-package com.example.foodtruck.homePage
-
-import android.os.Bundle
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import androidx.core.os.bundleOf
-import androidx.fragment.app.Fragment
-import androidx.fragment.app.viewModels
-import androidx.lifecycle.lifecycleScope
-import androidx.navigation.fragment.findNavController
-import androidx.recyclerview.widget.LinearLayoutManager
-import com.example.foodtruck.R
-import com.example.foodtruck.databinding.FragmentHomePageBinding
-import com.example.foodtruck.places.PlaceAdapter
-import kotlinx.coroutines.launch
-
-class HomePageFragment : Fragment(), PlaceAdapter.PlaceClickListener {
-
-    private var _binding: FragmentHomePageBinding? = null
-    private val binding get() = _binding!!
-    private val viewModel: HomePageViewModel by viewModels()
-
-    override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View {
-        _binding = FragmentHomePageBinding.inflate(inflater, container, false)
-        return binding.root
-        //return inflater.inflate(R.layout.fragment_home_page, container, false)
-    }
-
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        // Initialize your adapter
-        val placeAdapter = PlaceAdapter(this)
-
-        // Setup RecyclerView
-        binding.recyclerViewPlaces.apply {
-            adapter = placeAdapter
-            layoutManager = LinearLayoutManager(context)
-        }
-
-        // Observe changes in the database and submit list to adapter
-        viewModel.places.observe(viewLifecycleOwner) { places ->
-            placeAdapter.submitList(places)
-        }
-    }
-
-    override fun onAddCommentClicked(placeName: String) {
-        val bundle = bundleOf("placeName" to placeName)
-        findNavController().navigate(R.id.action_homePageFragment_to_postFragment, bundle)
-    }
-
-    override fun onViewCommentsClicked(placeName: String) {
-        val bundle = bundleOf("placeName" to placeName)
-        findNavController().navigate(R.id.action_homePageFragment_to_commentsFragment, bundle)
-    }
-
-    override fun onDestroyView() {
-        super.onDestroyView()
-        _binding = null
-    }
-}
Index: app/src/main/java/com/example/foodtruck/homePage/HomePageViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/homePage/HomePageViewModel.kt b/app/src/main/java/com/example/foodtruck/homePage/HomePageViewModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/homePage/HomePageViewModel.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,16 +0,0 @@
-package com.example.foodtruck.homePage
-
-import android.app.Application
-import androidx.lifecycle.AndroidViewModel
-import androidx.lifecycle.LiveData
-import androidx.lifecycle.ViewModel
-import com.example.foodtruck.database.DatabaseInstance
-import com.example.foodtruck.database.dao.PlaceDao
-import com.example.foodtruck.database.entities.Place
-
-class HomePageViewModel(application: Application) : AndroidViewModel(application) {
-
-    private val placeDao: PlaceDao = DatabaseInstance.getDatabase(application).placeDao()
-
-    val places: LiveData<List<Place>> = placeDao.getAllPlaces()
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/places/PlaceAdapter.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/places/PlaceAdapter.kt b/app/src/main/java/com/example/foodtruck/places/PlaceAdapter.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/places/PlaceAdapter.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,91 +0,0 @@
-package com.example.foodtruck.places
-
-import android.view.LayoutInflater
-import android.view.ViewGroup
-import android.widget.ImageView
-import androidx.recyclerview.widget.DiffUtil
-import androidx.recyclerview.widget.ListAdapter
-import androidx.recyclerview.widget.RecyclerView
-import com.example.foodtruck.database.entities.Place
-import com.example.foodtruck.databinding.FragmentPlaceBinding
-import com.example.foodtruck.placesApiService.PlaceResponse
-import com.example.foodtruck.placesApiService.PlacesApiService
-import com.squareup.picasso.Picasso
-import retrofit2.Call
-import retrofit2.Response
-import retrofit2.Retrofit
-import retrofit2.Callback
-import retrofit2.converter.gson.GsonConverterFactory
-
-//import com.bumptech.glide.Glide
-
-class PlaceAdapter(private val clickListener: PlaceClickListener) : ListAdapter<Place, PlaceAdapter.PlaceViewHolder>(PlaceDiffCallback()) {
-
-    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PlaceViewHolder {
-        val binding = FragmentPlaceBinding.inflate(LayoutInflater.from(parent.context), parent, false)
-        return PlaceViewHolder(binding, clickListener)
-    }
-
-    override fun onBindViewHolder(holder: PlaceViewHolder, position: Int) {
-        val place = getItem(position)
-        holder.bind(place)
-    }
-
-
-    class PlaceViewHolder(private val binding: FragmentPlaceBinding, private val clickListener: PlaceClickListener) : RecyclerView.ViewHolder(binding.root) {
-        fun bind(place: Place) {
-            val retrofit = Retrofit.Builder()
-                .baseUrl("https://maps.googleapis.com/")
-                .addConverterFactory(GsonConverterFactory.create())
-                .build()
-
-            val service = retrofit.create(PlacesApiService::class.java)
-            service.findPlaceFromText(place.name,fields = "name,rating",apiKey="AIzaSyBsV4dpcOTGvGNpk3C8Zdm_viZAGui4C1k").enqueue(object : Callback<PlaceResponse> {
-                override fun onResponse(call: Call<PlaceResponse>, response: Response<PlaceResponse>) {
-                    if (response.isSuccessful) {
-                        val rating = response.body()?.candidates?.firstOrNull()?.rating
-                        // Update your UI with the rating
-                        binding.textViewPlaceRating.text = "Rating: ${rating}"
-                    }
-                }
-
-                override fun onFailure(call: Call<PlaceResponse>, t: Throwable) {
-                    // Handle failure
-                    }
-            })
-
-            binding.textViewPlaceName.text = place.name
-            binding.textViewPlaceAddress.text = place.address
-            binding.textViewPlaceDescription.text = place.description
-
-            Picasso.get().invalidate(place.placePhoto)
-            Picasso.get()
-                .load(place.placePhoto)
-                .into(binding.imageViewPhoto as ImageView)
-
-            // Set up click listener for the "Add Comment" button
-            binding.buttonAddComment.setOnClickListener {
-                clickListener.onAddCommentClicked(place.name)
-            }
-
-            binding.buttonViewComments.setOnClickListener {
-                clickListener.onViewCommentsClicked(place.name)
-            }
-        }
-    }
-
-    interface PlaceClickListener {
-        fun onAddCommentClicked(placeName: String)
-        fun onViewCommentsClicked(placeName: String)
-    }
-}
-
-class PlaceDiffCallback : DiffUtil.ItemCallback<Place>() {
-    override fun areItemsTheSame(oldItem: Place, newItem: Place): Boolean {
-        return oldItem.id == newItem.id
-    }
-
-    override fun areContentsTheSame(oldItem: Place, newItem: Place): Boolean {
-        return oldItem == newItem
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/signup/SignUpActivity.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/signup/SignUpActivity.kt b/app/src/main/java/com/example/foodtruck/signup/SignUpActivity.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/signup/SignUpActivity.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,17 +0,0 @@
-package com.example.foodtruck.signup
-
-import android.os.Bundle
-import androidx.appcompat.app.AppCompatActivity
-import com.example.foodtruck.R
-
-class SignUpActivity : AppCompatActivity() {
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_sign_up)
-
-        supportFragmentManager.beginTransaction()
-            .replace(R.id.fragment_container, SignUpFragment())
-            .commit()
-    }
-
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/signup/SignUpFragment.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/signup/SignUpFragment.kt b/app/src/main/java/com/example/foodtruck/signup/SignUpFragment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/signup/SignUpFragment.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,149 +0,0 @@
-package com.example.foodtruck.signup
-
-import android.content.Intent
-import android.os.Bundle
-import android.util.Patterns
-import androidx.fragment.app.Fragment
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.Button
-import android.widget.EditText
-import android.widget.ProgressBar
-import android.widget.TextView
-import android.widget.Toast
-import androidx.fragment.app.activityViewModels
-import com.example.foodtruck.MainActivity
-import com.example.foodtruck.R
-import com.example.foodtruck.login.LoginActivity
-import com.example.foodtruck.login.UserCredentials
-
-
-class SignUpFragment : Fragment() {
-    private val signUpViewModel: SignUpViewModel by activityViewModels()
-    private lateinit var emailInput: EditText
-    private lateinit var passwordInput: EditText
-    private lateinit var fullNameInput: EditText
-    private lateinit var signUpButton: Button
-    private lateinit var progressBarSignUp: ProgressBar
-    private lateinit var loginLink:TextView
-
-
-    override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        val view: View = inflater.inflate(
-            R.layout.fragment_sign_up, container, false
-        )
-        emailInput = view.findViewById(R.id.emailInput)
-        passwordInput = view.findViewById(R.id.passwordInput)
-        fullNameInput = view.findViewById(R.id.fullNameInput)
-        signUpButton = view.findViewById(R.id.signUpButton)
-        progressBarSignUp = view.findViewById(R.id.progress_bar)
-        loginLink = view.findViewById<TextView>(R.id.login_link)
-
-        handleSignUpClick(signUpButton)
-        handleLoginClick(loginLink)
-        observeSignUpResult()
-        return view
-    }
-
-    private fun handleLoginClick(loginLink: TextView) {
-        loginLink.setOnClickListener {
-            val intent = Intent(requireContext(), LoginActivity::class.java)
-            startActivity(intent)
-        }
-    }
-
-    private fun observeSignUpResult() {
-        signUpViewModel.signUpResult.observe(viewLifecycleOwner) { result: String ->
-            if (result == "Success") {
-//               findNavController().navigate(R.id.action_signupFragment_to_loginFragment)
-                Toast.makeText(requireContext(), result, Toast.LENGTH_SHORT).show()
-               val intent = Intent(requireActivity(), MainActivity::class.java)
-               startActivity(intent)
-            } else {
-                resetParameters()
-//                manageViews(
-//                    emailInput, passwordInput, fullNameInput,
-//                    signUpButton, mode = "VISIBLE"
-//                )
-                Toast.makeText(requireContext(), result, Toast.LENGTH_SHORT).show()
-            }
-            progressBarSignUp.visibility = View.GONE
-        }
-    }
-
-    private fun handleSignUpClick(signUpButton: Button) {
-        signUpButton.setOnClickListener {
-            val credentials = UserCredentials(
-                emailInput.text.toString(), passwordInput.text.toString()
-            )
-            val userProperties = UserProperties(
-                fullNameInput.text.toString()
-            )
-            if (checkCredentials(credentials, emailInput, passwordInput) &&
-                checkUserProperties(userProperties, fullNameInput)
-            ) {
-//                manageViews(
-//                    emailInput, passwordInput, fullNameInput,
-//                     signUpButton, mode = "GONE"
-//                )
-                progressBarSignUp.visibility = View.VISIBLE
-                signUpViewModel.signUpUser(credentials, userProperties)
-            }
-        }
-    }
-
-    private fun resetParameters() {
-        emailInput.text.clear()
-        passwordInput.text.clear()
-        fullNameInput.text.clear()
-    }
-    private fun isString(value: String): Boolean {
-        return value.all { it.isLetter() || it.isWhitespace()}
-    }
-
-    private fun checkCredentials(
-        credentials: UserCredentials, emailInput: EditText,
-        passwordInput:EditText): Boolean{
-        if (credentials.email.isEmpty()){
-            emailInput.error = "Enter a email"
-        }
-        else if (credentials.password.isEmpty()){
-            passwordInput.error = "Enter a password"
-        }
-        else if (credentials.password.length <=6) {
-            passwordInput.error = "Password need to more than 6 characters long"
-        }
-        else if (!Patterns.EMAIL_ADDRESS.matcher(credentials.email).matches()){
-            emailInput.error = "Enter valid email format"
-        }
-        else{ return true }
-        return false
-    }
-
-    private fun checkUserProperties(
-        userProperties: UserProperties,
-        fullNameInput: EditText
-    ): Boolean {
-        if (userProperties.fullName.isEmpty() || !isString(userProperties.fullName)) {
-            fullNameInput.error = "Enter valid full name"
-        }
-        else {
-            return true
-        }
-        return false
-    }
-
-    //can be in utils- globalFunctions
-    private fun manageViews(vararg views: View, mode: String) {
-        for (view in views) {
-            if (mode == "GONE") { view.visibility = View.GONE }
-            else{ view.visibility = View.VISIBLE }
-        }
-    }
-
-
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/profile/EditCommentDialogFragment.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/profile/EditCommentDialogFragment.kt b/app/src/main/java/com/example/foodtruck/profile/EditCommentDialogFragment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/profile/EditCommentDialogFragment.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,104 +0,0 @@
-package com.example.foodtruck.profile
-
-import android.app.Activity
-import android.app.Dialog
-import android.content.Intent
-import android.net.Uri
-import android.os.Bundle
-import android.provider.MediaStore
-import android.view.LayoutInflater
-import android.view.View
-import android.widget.Button
-import android.widget.EditText
-import android.widget.ImageView
-import androidx.activity.result.ActivityResultLauncher
-import androidx.activity.result.contract.ActivityResultContracts
-import androidx.fragment.app.DialogFragment
-import androidx.fragment.app.activityViewModels
-import androidx.fragment.app.viewModels
-import com.example.foodtruck.R
-import com.google.android.material.dialog.MaterialAlertDialogBuilder
-import com.squareup.picasso.Picasso
-
-class EditCommentDialogFragment : DialogFragment() {
-    private lateinit var imageViewCommentPhoto: ImageView
-    private lateinit var editTextCommentText: EditText
-    private lateinit var pickImageContract: ActivityResultLauncher<Intent>
-    private var selectedImageUri: Uri? = null
-    private val viewModel: ProfileViewModel by activityViewModels()
-
-    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
-        val inflater = LayoutInflater.from(requireContext())
-        val view: View = inflater.inflate(R.layout.fragment_edit_comment_dialog, null)
-
-        editTextCommentText = view.findViewById(R.id.editTextComment)
-        imageViewCommentPhoto = view.findViewById(R.id.imageViewCommentPhoto)
-        val buttonSelectCommentPhoto: Button = view.findViewById(R.id.buttonSelectCommentPhoto)
-        // Fetch comment ID from arguments
-        val commentId: String? = arguments?.getString("commentId")
-
-        // Fetch comment data from existing comments in ViewModel
-        commentId?.let { id ->
-            val comment = viewModel.userComments.value?.find { it.commentId == id }
-            comment?.let {
-                editTextCommentText.setText(comment.comment)
-                Picasso.get().load(comment.photo).into(imageViewCommentPhoto)
-            }
-        }
-        // Initialize pickImageContract
-        pickImageContract = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
-            if (result.resultCode == Activity.RESULT_OK) {
-                val data: Intent? = result.data
-                selectedImageUri = data?.data
-                selectedImageUri?.let {
-                    // Load and display the selected image in the ImageView using Picasso
-                    Picasso.get().load(selectedImageUri).into(imageViewCommentPhoto)
-                }
-            }
-        }
-
-        // Set click listener for selecting comment photo
-        buttonSelectCommentPhoto.setOnClickListener {
-            val intent = Intent(Intent.ACTION_GET_CONTENT).apply {
-                type = "image/*"
-            }
-            pickImageContract.launch(intent)
-        }
-
-        return MaterialAlertDialogBuilder(requireContext())
-            .setTitle(R.string.edit_comment_dialog_title)
-            .setView(view)
-            .setPositiveButton(R.string.save) { dialog, which ->
-                // Handle save button click
-                val newText = editTextCommentText.text.toString()
-                // Update comment text and photo if changed
-                val comment = viewModel.userComments.value?.find { it.commentId == commentId }
-                comment?.let {
-                    if (newText != it.comment || selectedImageUri != null) {
-                        var updatedComment = it.copy(comment = newText)
-                        selectedImageUri?.let { uri ->
-                            // If a new photo is selected, update the comment's photo URL
-                            uploadImageAndUpdateComment(updatedComment, uri)
-                        }?:run {
-                            // Update the comment in the ViewModel
-                            viewModel.updateComment(updatedComment)
-                        }
-                    }
-                }
-            }
-            .setNegativeButton(R.string.cancel) { dialog, which ->
-                // Handle cancel button click
-            }
-            .create()
-    }
-
-    private fun uploadImageAndUpdateComment(comment: Comment, imageUri: Uri) {
-        // Upload image to Firebase Storage
-        viewModel.uploadImageToFirebaseStorage(imageUri) { photoUrl ->
-            // Update comment photo URL with the new photo URL
-            val updatedComment = comment.copy(photo = photoUrl)
-            // Update the comment in the ViewModel
-            viewModel.updateComment(updatedComment)
-        }
-    }
-}
Index: app/src/test/java/com/example/foodtruck/ExampleUnitTest.kt
===================================================================
diff --git a/app/src/test/java/com/example/foodtruck/ExampleUnitTest.kt b/app/src/test/java/com/example/foodtruck/ExampleUnitTest.kt
deleted file mode 100644
--- a/app/src/test/java/com/example/foodtruck/ExampleUnitTest.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,17 +0,0 @@
-package com.example.foodtruck
-
-import org.junit.Test
-
-import org.junit.Assert.*
-
-/**
- * Example local unit test, which will execute on the development machine (host).
- *
- * See [testing documentation](http://d.android.com/tools/testing).
- */
-class ExampleUnitTest {
-    @Test
-    fun addition_isCorrect() {
-        assertEquals(4, 2 + 2)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/login/LoginViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/login/LoginViewModel.kt b/app/src/main/java/com/example/foodtruck/login/LoginViewModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/login/LoginViewModel.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,57 +0,0 @@
-package com.example.foodtruck.login
-
-import android.util.Log
-import androidx.lifecycle.LiveData
-import androidx.lifecycle.MutableLiveData
-import androidx.lifecycle.ViewModel
-import com.google.firebase.auth.FirebaseAuth
-import com.google.firebase.database.*
-
-class LoginViewModel : ViewModel() {
-
-    private val _loginResult = MutableLiveData<Pair<HashMap<String, Any>, String>>() //hashmap-user data,string-user ID
-    val loginResult: LiveData<Pair<HashMap<String, Any>, String>> get() = _loginResult // public property, allowing other classes (like fragments or activities) to observe changes to the login result
-
-    private lateinit var auth: FirebaseAuth
-    private val firebaseDatabase = FirebaseDatabase.getInstance()
-
-
-    fun loginUser(credentials: UserCredentials) {
-        auth = FirebaseAuth.getInstance()
-        auth.signInWithEmailAndPassword(credentials.email, credentials.password)
-            .addOnSuccessListener { authResult ->
-                val user = authResult.user
-                user?.let { firebaseUser ->
-                    val userId = firebaseUser.uid
-                    // Retrieve user data from Realtime Database
-                    firebaseDatabase.reference.child("Users").child(userId)
-                        .addListenerForSingleValueEvent(object : ValueEventListener {
-                            override fun onDataChange(dataSnapshot: DataSnapshot) {
-                                val userData = dataSnapshot.value as HashMap<String, Any>?
-                                userData?.let {
-                                    // Emit login result with user data and email
-                                    _loginResult.value = Pair(userData, firebaseUser.email ?: "")
-                                } ?: run {
-                                    // User data is null
-                                    _loginResult.value = Pair(hashMapOf(), "")
-                                }
-                            }
-
-                            override fun onCancelled(databaseError: DatabaseError) {
-                                // Handle database error
-                                _loginResult.value = Pair(hashMapOf(), "")
-                            }
-                        })
-                } ?: run {
-                    // Auth user is null
-                    _loginResult.value = Pair(hashMapOf(), "")
-                }
-            }
-            .addOnFailureListener { exception ->
-                // Handle failure to sign in
-                _loginResult.value = Pair(hashMapOf(), "")
-            }
-    }
-
-
-}
Index: app/src/main/java/com/example/foodtruck/posts/PostFragment.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/posts/PostFragment.kt b/app/src/main/java/com/example/foodtruck/posts/PostFragment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/posts/PostFragment.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,122 +0,0 @@
-package com.example.foodtruck.post
-
-
-import android.net.Uri
-import android.os.Bundle
-import android.util.Log
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.Toast
-import androidx.activity.result.contract.ActivityResultContracts
-import androidx.fragment.app.Fragment
-import androidx.fragment.app.viewModels
-import androidx.navigation.fragment.findNavController
-import com.example.foodtruck.databinding.FragmentPostBinding
-import com.example.foodtruck.posts.PostViewModel
-import com.google.firebase.auth.FirebaseAuth
-import com.google.firebase.storage.FirebaseStorage
-
-class PostFragment : Fragment() {
-
-    private var _binding: FragmentPostBinding? = null
-    private val binding get() = _binding!!
-    private val viewModel: PostViewModel by viewModels()
-
-    // Variable to hold the selected image URI
-    private var selectedImageUri: Uri? = null
-
-    // ActivityResultLauncher for the image picker
-    private val imagePickerLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->
-        uri?.let {
-            binding.imageViewUploadedPhoto.setImageURI(uri)
-            selectedImageUri = uri
-        }
-    }
-
-    override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View {
-        _binding = FragmentPostBinding.inflate(inflater, container, false)
-        return binding.root
-    }
-
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-        // Retrieve placeName from the arguments passed to this fragment
-        val placeName = arguments?.getString("placeName") ?: "Unknown"
-
-        binding.buttonChoosePhoto.setOnClickListener {
-            // Launch the image picker
-            imagePickerLauncher.launch("image/*")
-        }
-
-        binding.buttonSubmitComment.setOnClickListener {
-            val commentText = binding.inputComment.text.toString()
-            val userId = getCurrentUserId()
-
-            selectedImageUri?.let { uri ->
-                if (userId != null && commentText.isNotEmpty()) {
-                    uploadImageToFirebaseStorage(uri) { photoUrl ->
-                        viewModel.createPost(userId, commentText, photoUrl, placeName ?: "Unknown",
-                            onSuccess = {
-                                // Navigate back only on success
-                                findNavController().navigateUp()
-                            },
-                            onFailure = { e ->
-                                // Log the error or show an error message
-                                Log.e("PostFragment", "Failed to create post", e)
-                                Toast.makeText(requireContext(), "Failed to create post", Toast.LENGTH_SHORT).show()
-                            }
-                        )
-                    }
-                } else {
-                    Toast.makeText(requireContext(), "הוסף תגובה", Toast.LENGTH_SHORT).show()
-                }
-            } ?: run {
-                Toast.makeText(requireContext(), "בבקשה הוסף תמונה", Toast.LENGTH_SHORT).show()
-            }
-        }
-
-        // Handle clicks on the go back icon
-        binding.goBackIcon.setOnClickListener {
-            findNavController().navigateUp()
-        }
-    }
-
-    override fun onDestroyView() {
-        super.onDestroyView()
-        _binding = null
-    }
-
-    private fun getCurrentUserId(): String? {
-        val user = FirebaseAuth.getInstance().currentUser
-        return user?.uid
-    }
-
-    private fun uploadImageToFirebaseStorage(imageUri: Uri, callback: (String) -> Unit) {
-        val storageRef = FirebaseStorage.getInstance().reference
-        val imagesRef = storageRef.child("images/${System.currentTimeMillis()}_${imageUri.lastPathSegment}")
-        val uploadTask = imagesRef.putFile(imageUri)
-
-        uploadTask.continueWithTask { task ->
-            if (!task.isSuccessful) {
-                task.exception?.let {
-                    throw it
-                }
-            }
-            imagesRef.downloadUrl
-        }.addOnCompleteListener { task ->
-            if (task.isSuccessful) {
-                val downloadUri = task.result
-                callback(downloadUri.toString())
-            } else {
-                // Handle the error
-                task.exception?.message?.let {
-                    // Show error message to the user
-                }
-            }
-        }
-    }
-}
Index: app/src/main/java/com/example/foodtruck/signup/SignUpViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/signup/SignUpViewModel.kt b/app/src/main/java/com/example/foodtruck/signup/SignUpViewModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/signup/SignUpViewModel.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,53 +0,0 @@
-package com.example.foodtruck.signup
-
-import androidx.lifecycle.LiveData
-import androidx.lifecycle.MutableLiveData
-import androidx.lifecycle.ViewModel
-import com.example.foodtruck.login.UserCredentials
-import com.google.firebase.auth.FirebaseAuth
-import com.google.firebase.auth.ktx.auth
-import com.google.firebase.database.FirebaseDatabase
-import com.google.firebase.ktx.Firebase
-import java.util.UUID
-
-class SignUpViewModel : ViewModel() {
-
-    private val _signUpResult = MutableLiveData<String>() //to hold the result of the sign-up operation
-    val signUpResult: LiveData<String> get() = _signUpResult // to allow fragments or activities to observe changes to the sign-up result
-
-    private lateinit var auth: FirebaseAuth
-    private val firebaseDatabase = FirebaseDatabase.getInstance()
-
-    fun signUpUser(credentials: UserCredentials, userProperties: UserProperties) {
-        auth = Firebase.auth
-
-        auth.createUserWithEmailAndPassword(credentials.email, credentials.password)
-            .addOnSuccessListener { authResult ->
-                val userId = authResult.user?.uid
-                if (userId != null) {
-                    val userRef = firebaseDatabase.reference.child("Users").child(userId)
-                    val user = createUserMap(userId,userProperties)
-
-                    userRef.setValue(user)
-                        .addOnSuccessListener {
-                            _signUpResult.value = "Success"
-                        }
-                        .addOnFailureListener { e ->
-                            _signUpResult.value = "Failed to create user: ${e.message}"
-                        }
-                } else {
-                    _signUpResult.value = "Failed to create user: User ID is null"
-                }
-            }
-            .addOnFailureListener { e ->
-                _signUpResult.value = "Error: ${e.message}"
-            }
-    }
-
-    private fun createUserMap(userId: String,userProperties: UserProperties): Map<String, Any> {
-        val userMap = HashMap<String, Any>()
-        userMap["fullName"] = userProperties.fullName
-        userMap["userId"] = userId
-        return userMap
-    }
-}
Index: app/src/main/java/com/example/foodtruck/utils/NavigationBarFragment.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/utils/NavigationBarFragment.kt b/app/src/main/java/com/example/foodtruck/utils/NavigationBarFragment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/utils/NavigationBarFragment.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,44 +0,0 @@
-package com.example.foodtruck.components
-
-import android.os.Bundle
-import android.util.Log
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import androidx.fragment.app.Fragment
-import androidx.navigation.fragment.findNavController
-import com.example.foodtruck.R
-import com.example.foodtruck.databinding.FragmentNavigationBarBinding
-
-class NavigationBarFragment : Fragment() {
-    private var _binding: FragmentNavigationBarBinding? = null
-    private val binding get() = _binding!!
-
-    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
-        _binding = FragmentNavigationBarBinding.inflate(inflater, container, false)
-        return binding.root
-    }
-
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-        binding.bottomNavigation.setOnItemSelectedListener { item ->
-            Log.d("TAG","NavigationBarFragment")
-            when (item.itemId) {
-                R.id.navigation_home -> {
-                    findNavController().navigate(R.id.homePageFragment)
-                    true
-                }
-                R.id.navigation_profile -> {
-                    findNavController().navigate(R.id.profileFragment)
-                    true
-                }
-                else -> false
-            }
-        }
-    }
-
-    override fun onDestroyView() {
-        super.onDestroyView()
-        _binding=null
-        }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/placesApiService/PlaceDetailsResponse.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/placesApiService/PlaceDetailsResponse.kt b/app/src/main/java/com/example/foodtruck/placesApiService/PlaceDetailsResponse.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/placesApiService/PlaceDetailsResponse.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,4 +0,0 @@
-package com.example.foodtruck.placesApiService
-
-data class PlaceResponse(val candidates: List<PlaceDetails>)
-data class PlaceDetails(val name: String, val rating:Double)
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/profile/EditProfileDialogFragment.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/profile/EditProfileDialogFragment.kt b/app/src/main/java/com/example/foodtruck/profile/EditProfileDialogFragment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/profile/EditProfileDialogFragment.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,106 +0,0 @@
-package com.example.foodtruck.profile
-
-import android.app.Activity
-import android.app.Dialog
-import android.content.Intent
-import android.net.Uri
-import android.os.Bundle
-import android.provider.MediaStore
-import android.util.Log
-import android.view.LayoutInflater
-import android.widget.Button
-import android.widget.EditText
-import android.widget.ImageView
-import androidx.activity.result.ActivityResultLauncher
-import androidx.activity.result.contract.ActivityResultContracts
-import androidx.fragment.app.DialogFragment
-import androidx.fragment.app.activityViewModels
-import androidx.fragment.app.viewModels
-import androidx.lifecycle.ViewModelProvider
-import com.example.foodtruck.R
-import com.example.foodtruck.shared.SharedViewModel
-import com.google.android.material.dialog.MaterialAlertDialogBuilder
-import com.squareup.picasso.Picasso
-
-class EditProfileDialogFragment : DialogFragment() {
-    private lateinit var imageViewProfilePic: ImageView
-    private lateinit var pickImageContract: ActivityResultLauncher<Intent>
-    private var selectedImageUri: Uri? = null
-    private val sharedViewModel: SharedViewModel by lazy {
-        ViewModelProvider(requireActivity())[SharedViewModel::class.java]
-    }
-    private val viewModel: ProfileViewModel by activityViewModels()
-
-
-
-    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
-        val inflater = LayoutInflater.from(requireContext())
-        val view = inflater.inflate(R.layout.fragment_edit_profile_dialog, null)
-
-        val editTextProfileName = view.findViewById<EditText>(R.id.editTextProfileName)
-         imageViewProfilePic = view.findViewById<ImageView>(R.id.imageViewProfilePic)
-        val buttonSelectProfilePic = view.findViewById<Button>(R.id.buttonSelectProfilePic)
-        val currentName = arguments?.getString("currentName")
-        // Initialize pickImageContract
-        pickImageContract = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
-            if (result.resultCode == Activity.RESULT_OK) {
-                val data: Intent? = result.data
-                selectedImageUri= data?.data
-                selectedImageUri?.let {
-                    // Load and display the selected image in the ImageView using Picasso
-                    Picasso.get().load(selectedImageUri).into(imageViewProfilePic)
-                }
-            }
-        }
-
-
-        // Pre-fill the EditText field with the current name
-        Log.d("TAG","sharedViewModel.userMetaData.fullName: ${sharedViewModel.userMetaData.fullName}")
-        editTextProfileName.setText(currentName)
-
-        // Fetch and display the profile photo from ProfileViewModel
-        val defaultPhotoResourceId = R.drawable.profile_photo_placeholder
-        val defaultPhotoUri = Uri.parse("android.resource://${requireContext().packageName}/$defaultPhotoResourceId")
-        viewModel.fetchProfilePhoto(defaultPhotoUri)
-        viewModel.profilePhotoUrl.observe(this) { photoUrl ->
-            Picasso.get().load(photoUrl)
-                .placeholder(R.drawable.profile_photo_placeholder)
-                .error(R.drawable.profile_photo_placeholder)
-                .into(imageViewProfilePic)
-        }
-        // Set click listener for selecting profile picture
-        buttonSelectProfilePic.setOnClickListener {
-            val intent = Intent(Intent.ACTION_GET_CONTENT).apply {
-                type = "image/*"
-            }
-            pickImageContract.launch(intent)
-        }
-
-        return MaterialAlertDialogBuilder(requireContext())
-            .setTitle(R.string.edit_profile_dialog_title)
-            .setView(view) // Set custom layout as dialog content view
-            .setPositiveButton(R.string.save) { dialog, which ->
-                // Handle save button click
-                val newName = editTextProfileName.text.toString()
-                Log.d("TAG", "selectedImageUri: $selectedImageUri")
-                // // Update profile with newName if it's different from the current name or if a new profile picture has been selected
-                if (newName != sharedViewModel.userMetaData.fullName || selectedImageUri != null) {
-                    if (newName != sharedViewModel.userMetaData.fullName) {
-                        Log.d("TAG", "sharedViewModel.userMetaData.fullName: ${sharedViewModel.userMetaData.fullName}")
-                        viewModel.updateUserName(sharedViewModel.userMetaData, newName)
-                        sharedViewModel.userMetaData.fullName = newName
-                    }
-                    selectedImageUri?.let { uri ->
-                        viewModel.uploadProfileImage(sharedViewModel.userMetaData, uri)
-                        sharedViewModel.userMetaData.profilePhoto = uri.toString()
-                    }
-                }
-            }
-            .setNegativeButton(R.string.cancel) { dialog, which ->
-                // Handle cancel button click
-            }
-            .create()
-    }
-}
-
-
Index: app/src/main/java/com/example/foodtruck/database/dao/PostDao.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/database/dao/PostDao.kt b/app/src/main/java/com/example/foodtruck/database/dao/PostDao.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/database/dao/PostDao.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,30 +0,0 @@
-package com.example.foodtruck.database.dao
-
-import androidx.lifecycle.LiveData
-import androidx.room.Dao
-import androidx.room.Delete
-import androidx.room.Insert
-import androidx.room.Query
-import androidx.room.Update
-import com.example.foodtruck.database.entities.Post
-
-@Dao
-interface PostDao {
-    @Insert
-    suspend fun insertPost(post: Post)
-
-    @Update
-    suspend fun updatePost(post: Post)
-
-    @Delete
-    suspend fun deletePost(post: Post)
-
-    @Query("SELECT * FROM posts")
-    fun getAllPosts(): LiveData<List<Post>>
-
-    @Query("SELECT * FROM posts WHERE id = :postId")
-    fun getPostById(postId: Int): Post?
-
-    @Query("SELECT * FROM posts WHERE userId = :userId ")
-    fun getPostsByUserId(userId: String): LiveData<List<Post>>
-}
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/profile/ProfileModel.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/profile/ProfileModel.kt b/app/src/main/java/com/example/foodtruck/profile/ProfileModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/profile/ProfileModel.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,7 +0,0 @@
-package com.example.foodtruck.profile
-
-data class UserMetaData(
-    var fullName: String,
-    var email: String,
-    var profilePhoto: String
-)
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/signup/SignUpModel.kt
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/signup/SignUpModel.kt b/app/src/main/java/com/example/foodtruck/signup/SignUpModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/foodtruck/signup/SignUpModel.kt	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
+++ /dev/null	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
@@ -1,3 +0,0 @@
-package com.example.foodtruck.signup
-
-data class UserProperties(val fullName: String)
\ No newline at end of file
