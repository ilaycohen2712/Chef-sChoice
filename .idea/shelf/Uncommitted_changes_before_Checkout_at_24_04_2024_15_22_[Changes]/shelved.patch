Index: app/src/main/java/com/example/foodtruck/profile/ProfileFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.foodtruck.profile\r\n\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.foodtruck.R\r\nimport com.example.foodtruck.Welcome\r\nimport com.example.foodtruck.shared.SharedViewModel\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.squareup.picasso.Picasso\r\nimport de.hdodenhof.circleimageview.CircleImageView\r\n\r\n\r\n\r\n\r\nclass ProfileFragment : Fragment() , CommentAdapter.EditClickListener, CommentAdapter.DeleteClickListener{\r\n\r\n    private val viewModel: ProfileViewModel by activityViewModels()\r\n    private lateinit var commentRecyclerView: RecyclerView\r\n    private lateinit var profileImageView: CircleImageView\r\n    private lateinit var nameTextView: TextView\r\n    private lateinit var emailTextView: TextView\r\n    private lateinit var logoutButton: Button\r\n    private lateinit var editProfileButton: ImageView\r\n    private lateinit var auth: FirebaseAuth\r\n\r\n    private var currentName: String? = null\r\n    private var currentProfilePicUrl: String? = null\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view: View = inflater.inflate(\r\n            R.layout.fragment_profile, container, false\r\n        )\r\n        profileImageView = view.findViewById(R.id.profileImageView)\r\n        nameTextView=view.findViewById(R.id.nameTextView)\r\n        emailTextView=view.findViewById(R.id.emailTextView)\r\n        logoutButton=view.findViewById(R.id.logoutButton)\r\n        editProfileButton=view.findViewById(R.id.editProfileButton)\r\n        // Initialize RecyclerView\r\n        commentRecyclerView = view.findViewById(R.id.userCommentRecyclerView)\r\n        commentRecyclerView.layoutManager = LinearLayoutManager(requireContext())\r\n        return view\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        observeProfilePhoto()\r\n        observeUserData()\r\n        observeUserComments()\r\n        auth = FirebaseAuth.getInstance()\r\n        logoutButton.setOnClickListener {\r\n            logoutUser()\r\n        }\r\n\r\n        editProfileButton.setOnClickListener {\r\n            editProfile()\r\n        }\r\n        // Fetch and display profile photo\r\n        val defaultPhotoResourceId = R.drawable.profile_photo_placeholder\r\n        val defaultPhotoUri = Uri.parse(\"android.resource://${requireContext().packageName}/$defaultPhotoResourceId\")\r\n\r\n        viewModel.fetchProfilePhoto(defaultPhotoUri)\r\n        viewModel.fetchUserName()\r\n        viewModel.fetchUserEmail()\r\n        viewModel.fetchUserComments()\r\n    }\r\n\r\n    private fun observeUserComments() {\r\n        viewModel.userComments.observe(viewLifecycleOwner) { comments ->\r\n            // Update RecyclerView with the list of comments\r\n            commentRecyclerView.adapter = CommentAdapter(comments).apply {\r\n                editClickListener = this@ProfileFragment\r\n                deleteClickListener = this@ProfileFragment\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun observeProfilePhoto() {\r\n        viewModel.profilePhotoUrl.observe(viewLifecycleOwner) { photoUrl ->\r\n            Picasso.get()\r\n                .load(photoUrl)\r\n                .placeholder(R.drawable.profile_photo_placeholder) // Placeholder image while loading\r\n                .error(R.drawable.profile_photo_placeholder) // Image to show in case of error\r\n                .into(profileImageView as ImageView)\r\n        }\r\n    }\r\n\r\n    private fun observeUserData() {\r\n        viewModel.userName.observe(viewLifecycleOwner) { name ->\r\n            Log.d(\"TAG\", \"observeUserData: $name\")\r\n            // Update UI with user's name\r\n            nameTextView.text = name\r\n            currentName=name\r\n        }\r\n\r\n        val userEmail = viewModel.fetchUserEmail()\r\n        // Update UI with user's email\r\n        emailTextView.text = userEmail\r\n    }\r\n\r\n\r\n    private fun logoutUser() {\r\n        auth.signOut()\r\n        // navigate the user to welcome activity\r\n        val intent = Intent(requireContext(), Welcome::class.java)\r\n        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n        startActivity(intent)\r\n\r\n    }\r\n    private fun editProfile() {\r\n        val dialogFragment = EditProfileDialogFragment().apply {\r\n            arguments = Bundle().apply {\r\n                putString(\"currentName\", currentName)\r\n                putString(\"currentProfilePicUrl\", currentProfilePicUrl)\r\n            }\r\n        }\r\n        dialogFragment.show(parentFragmentManager, \"EditProfileDialogFragment\")\r\n    }\r\n\r\n    override fun onEditClick(position: Int) {\r\n        // Retrieve the comment at the given position\r\n        val comment = viewModel.userComments.value?.get(position)\r\n        // Open a dialog fragment to edit the comment\r\n//        comment?.let {\r\n//            val action = ProfileFragmentDirections.actionProfileFragmentToEditCommentDialogFragment(commentId = it.commentId)\r\n//            findNavController().navigate(action)\r\n//        }\r\n        // Open a dialog fragment to edit the comment\r\n        comment?.let {\r\n            val args = Bundle().apply {\r\n                putString(\"commentId\", it.commentId)\r\n            }\r\n\r\n            val editCommentDialogFragment = EditCommentDialogFragment().apply {\r\n                arguments = args\r\n            }\r\n\r\n            editCommentDialogFragment.show(parentFragmentManager, \"EditCommentDialogFragment\")\r\n        }\r\n    }\r\n\r\n    override fun onDeleteClick(position: Int) {\r\n        // Retrieve the comment at the given position\r\n        val comment = viewModel.userComments.value?.get(position)\r\n\r\n        //delete the comment from the database\r\n        comment?.let {\r\n            viewModel.deleteComment(comment.commentId)\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/profile/ProfileFragment.kt b/app/src/main/java/com/example/foodtruck/profile/ProfileFragment.kt
--- a/app/src/main/java/com/example/foodtruck/profile/ProfileFragment.kt	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
+++ b/app/src/main/java/com/example/foodtruck/profile/ProfileFragment.kt	(date 1713961257859)
@@ -1,6 +1,9 @@
 package com.example.foodtruck.profile
 
+import android.Manifest
 import android.content.Intent
+import android.content.pm.PackageManager
+import android.location.Location
 import android.net.Uri
 import android.os.Bundle
 import android.util.Log
@@ -10,6 +13,9 @@
 import android.widget.Button
 import android.widget.ImageView
 import android.widget.TextView
+import android.widget.Toast
+import androidx.core.app.ActivityCompat
+import androidx.core.content.ContextCompat
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.activityViewModels
 import androidx.fragment.app.viewModels
@@ -19,14 +25,25 @@
 import com.example.foodtruck.R
 import com.example.foodtruck.Welcome
 import com.example.foodtruck.shared.SharedViewModel
+import com.google.android.gms.location.FusedLocationProviderClient
+import com.google.android.gms.location.LocationServices
+import com.google.android.gms.maps.CameraUpdateFactory
+import com.google.android.gms.maps.GoogleMap
+import com.google.android.gms.maps.OnMapReadyCallback
+import com.google.android.gms.maps.SupportMapFragment
+import com.google.android.gms.maps.model.LatLng
+import com.google.android.gms.maps.model.Marker
+import com.google.android.gms.maps.model.MarkerOptions
 import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.storage.FirebaseStorage
+import com.google.firebase.storage.StorageException
 import com.squareup.picasso.Picasso
 import de.hdodenhof.circleimageview.CircleImageView
 
 
 
-
-class ProfileFragment : Fragment() , CommentAdapter.EditClickListener, CommentAdapter.DeleteClickListener{
+class ProfileFragment : Fragment(), OnMapReadyCallback, GoogleMap.OnMarkerClickListener,
+    CommentAdapter.EditClickListener, CommentAdapter.DeleteClickListener {
 
     private val viewModel: ProfileViewModel by activityViewModels()
     private lateinit var commentRecyclerView: RecyclerView
@@ -36,10 +53,16 @@
     private lateinit var logoutButton: Button
     private lateinit var editProfileButton: ImageView
     private lateinit var auth: FirebaseAuth
-
+    private lateinit var googleMap: GoogleMap
+    private lateinit var fusedLocationClient: FusedLocationProviderClient
+    private lateinit var lastLocation : Location
     private var currentName: String? = null
     private var currentProfilePicUrl: String? = null
 
+    companion object {
+        private const val DEFAULT_ZOOM = 15f
+        private const val LOCATION_PERMISSION_REQUEST_CODE = 1001
+    }
     override fun onCreateView(
         inflater: LayoutInflater, container: ViewGroup?,
         savedInstanceState: Bundle?
@@ -48,13 +71,18 @@
             R.layout.fragment_profile, container, false
         )
         profileImageView = view.findViewById(R.id.profileImageView)
-        nameTextView=view.findViewById(R.id.nameTextView)
-        emailTextView=view.findViewById(R.id.emailTextView)
-        logoutButton=view.findViewById(R.id.logoutButton)
-        editProfileButton=view.findViewById(R.id.editProfileButton)
-        // Initialize RecyclerView
+        nameTextView = view.findViewById(R.id.nameTextView)
+        emailTextView = view.findViewById(R.id.emailTextView)
+        logoutButton = view.findViewById(R.id.logoutButton)
+        editProfileButton = view.findViewById(R.id.editProfileButton)
         commentRecyclerView = view.findViewById(R.id.userCommentRecyclerView)
         commentRecyclerView.layoutManager = LinearLayoutManager(requireContext())
+
+
+        val mapFragment = childFragmentManager.findFragmentById(R.id.map) as SupportMapFragment
+        mapFragment.getMapAsync(this)
+        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())
+
         return view
     }
 
@@ -71,6 +99,7 @@
         editProfileButton.setOnClickListener {
             editProfile()
         }
+
         // Fetch and display profile photo
         val defaultPhotoResourceId = R.drawable.profile_photo_placeholder
         val defaultPhotoUri = Uri.parse("android.resource://${requireContext().packageName}/$defaultPhotoResourceId")
@@ -81,6 +110,80 @@
         viewModel.fetchUserComments()
     }
 
+    override fun onMapReady(map: GoogleMap) {
+        googleMap = map
+        googleMap.uiSettings.isZoomControlsEnabled = true
+        googleMap.setOnMarkerClickListener(this@ProfileFragment)
+        setupMap()
+    }
+    private fun setupMap() {
+        if (ActivityCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+            ActivityCompat.requestPermissions(requireActivity(), arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), LOCATION_PERMISSION_REQUEST_CODE)
+            return
+        }
+
+        googleMap.isMyLocationEnabled = true
+        fusedLocationClient.lastLocation.addOnSuccessListener(requireActivity()) { location ->
+            if (location != null) {
+                lastLocation = location
+                val currentLatLng = LatLng(location.latitude, location.longitude)
+                googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(currentLatLng, 12f))
+                addMarkers()
+            } else {
+                Toast.makeText(requireContext(), "Could not get current location", Toast.LENGTH_SHORT).show()
+            }
+        }
+    }
+
+    private fun addMarkers() {
+        // Add a marker for Algorithmim
+        val location1 = LatLng(32.109333, 34.855499)
+        googleMap.addMarker(MarkerOptions().position(location1).title("Israel Farkash teacher of algo, Tel Aviv"))
+
+        // Add a marker for Rishon LeZion
+        val location2 = LatLng(31.9585, 34.8101)
+        googleMap.addMarker(MarkerOptions().position(location2).title("Moshe Cohen teacher of C/C++,jAVA,Rishon LeZion"))
+
+        // Add a marker for Jerusalem
+        val location3 = LatLng(31.7683, 35.2137)
+        googleMap.addMarker(MarkerOptions().position(location3).title("Yuval Cohen teacher of data structure, Jerusalem"))
+
+        // Add a marker for Modiin
+        val location4 = LatLng(31.8904, 35.0057)
+        googleMap.addMarker(MarkerOptions().position(location4).title("Chen Amrani teacher of Java,Modiin"))
+
+        // Add a marker for Ramat Gan
+        val location5 = LatLng(32.0853, 34.8119)
+        googleMap.addMarker(MarkerOptions().position(location5).title("Ori Farkash teacher of C++,Ramat Gan"))
+
+        // Add a marker for Petach Tikva
+        val location6 = LatLng(32.0869, 34.8878)
+        googleMap.addMarker(MarkerOptions().position(location6).title("Oren ShemTov teacher of Python,Petach Tikva"))
+
+        // Add a marker for Haifa
+        val location7 = LatLng(32.8054, 34.9721)
+        googleMap.addMarker(MarkerOptions().position(location7).title("Roy Ben Moshe teacher of Analiza, Haifa"))
+
+        // Add a marker for Ness Ziona
+        val location8 = LatLng(31.9503, 34.7881)
+        googleMap.addMarker(MarkerOptions().position(location8).title("Israel Israeli teacher of algo,Ness Ziona"))
+
+        // Add a marker for Holon
+        val location9 = LatLng(32.0097, 34.7746)
+        googleMap.addMarker(MarkerOptions().position(location9).title("Israel Farkash teacher of Computational models ,Holon"))
+
+        // Add a marker for Rosh HaAyin
+        val location10 = LatLng(32.0649, 34.9395)
+        googleMap.addMarker(MarkerOptions().position(location10).title("Israel Farkash teacher of Kotlin , Rosh HaAyin"))
+
+        // Add a marker for Beer Yaakov
+        val location11 = LatLng(31.9167, 34.7833)
+        googleMap.addMarker(MarkerOptions().position(location11).title("Israel Farkash teacher of C# ,Beer Yaakov"))
+
+        // Move the camera to the Rishon LeZion marker
+        googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(location2, 12f))
+    }
+
     private fun observeUserComments() {
         viewModel.userComments.observe(viewLifecycleOwner) { comments ->
             // Update RecyclerView with the list of comments
@@ -97,7 +200,7 @@
                 .load(photoUrl)
                 .placeholder(R.drawable.profile_photo_placeholder) // Placeholder image while loading
                 .error(R.drawable.profile_photo_placeholder) // Image to show in case of error
-                .into(profileImageView as ImageView)
+                .into(profileImageView)
         }
     }
 
@@ -106,7 +209,7 @@
             Log.d("TAG", "observeUserData: $name")
             // Update UI with user's name
             nameTextView.text = name
-            currentName=name
+            currentName = name
         }
 
         val userEmail = viewModel.fetchUserEmail()
@@ -114,15 +217,14 @@
         emailTextView.text = userEmail
     }
 
-
     private fun logoutUser() {
         auth.signOut()
         // navigate the user to welcome activity
         val intent = Intent(requireContext(), Welcome::class.java)
         intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
         startActivity(intent)
-
     }
+
     private fun editProfile() {
         val dialogFragment = EditProfileDialogFragment().apply {
             arguments = Bundle().apply {
@@ -136,11 +238,6 @@
     override fun onEditClick(position: Int) {
         // Retrieve the comment at the given position
         val comment = viewModel.userComments.value?.get(position)
-        // Open a dialog fragment to edit the comment
-//        comment?.let {
-//            val action = ProfileFragmentDirections.actionProfileFragmentToEditCommentDialogFragment(commentId = it.commentId)
-//            findNavController().navigate(action)
-//        }
         // Open a dialog fragment to edit the comment
         comment?.let {
             val args = Bundle().apply {
@@ -165,4 +262,21 @@
         }
     }
 
+
+    override fun onMarkerClick(marker: Marker): Boolean {
+        val countryName = marker.title
+        val bundle = Bundle().apply {
+            putString("countryName", countryName)
+        }
+        val profileFragment = ProfileFragment().apply {
+            arguments = bundle
+        }
+        parentFragmentManager.beginTransaction()
+            .replace(R.id.fragment_container, profileFragment)
+            .addToBackStack(null)
+            .commit()
+        return true
+    }
 }
+
+
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.androidApplication)\r\n    alias(libs.plugins.jetbrainsKotlinAndroid)\r\n    kotlin(\"kapt\")\r\n    id(\"com.google.gms.google-services\")\r\n    id(\"androidx.navigation.safeargs.kotlin\")\r\n}\r\n\r\n\r\nandroid {\r\n    namespace = \"com.example.foodtruck\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.foodtruck\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n        vectorDrawables.useSupportLibrary = true\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_1_8\r\n        targetCompatibility = JavaVersion.VERSION_1_8\r\n    }\r\n\r\n    kotlinOptions {\r\n        jvmTarget = \"1.8\"\r\n    }\r\n\r\n    buildFeatures {\r\n        viewBinding = true\r\n    }\r\n\r\n}\r\n\r\ndependencies {\r\n    implementation(libs.androidx.core.ktx)\r\n    implementation(libs.androidx.appcompat)\r\n    implementation(libs.material)\r\n    implementation(libs.androidx.activity)\r\n    implementation(libs.androidx.constraintlayout)\r\n    implementation(libs.androidx.room.common)\r\n\r\n    //implementation(libs.androidx.room.compiler)\r\n    implementation(libs.androidx.room.ktx)\r\n    implementation(libs.firebase.database)\r\n    implementation(libs.firebase.firestore)\r\n    implementation(libs.firebase.auth)\r\n    implementation (\"com.squareup.retrofit2:retrofit:2.9.0\")\r\n    implementation (\"com.squareup.retrofit2:converter-gson:2.9.0\")\r\n    implementation(\"com.squareup.picasso:picasso:2.8\")\r\n    implementation(\"androidx.fragment:fragment-ktx:1.6.2\")\r\n    implementation (\"de.hdodenhof:circleimageview:3.1.0\")\r\n    implementation(libs.firebase.storage.ktx)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.androidx.junit)\r\n    androidTestImplementation(libs.androidx.espresso.core)\r\n    annotationProcessor (\"androidx.room:room-compiler:2.4.0-beta01\")\r\n    implementation(platform(\"com.google.firebase:firebase-bom:32.7.3\"))\r\n    implementation (\"com.google.firebase:firebase-storage-ktx:20.3.0\")\r\n    implementation (\"com.google.firebase:firebase-auth-ktx:22.3.0\")\r\n    implementation(\"com.google.firebase:firebase-analytics\")\r\n\r\n    implementation (\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9\")\r\n    implementation (\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0\")\r\n    implementation (\"androidx.fragment:fragment-ktx:1.3.6\")\r\n    implementation (\"com.google.android.material:material:1.11.0\")\r\n    implementation(\"androidx.room:room-runtime:2.6.1\")\r\n    kapt(\"androidx.room:room-compiler:2.6.1\")\r\n    implementation (\"com.github.bumptech.glide:glide:4.12.0\")\r\n    annotationProcessor (\"com.github.bumptech.glide:compiler:4.12.0\")\r\n\r\n    implementation (\"com.squareup.picasso:picasso:2.71828\")\r\n\r\n    implementation (\"androidx.navigation:navigation-fragment-ktx:2.3.0\")\r\n    implementation (\"androidx.navigation:navigation-ui-ktx:2.3.0\")\r\n\r\n    implementation (\"com.google.firebase:firebase-firestore-ktx:24.10.0\")\r\n    implementation (\"com.google.firebase:firebase-storage:20.3.0\")\r\n    implementation (\"com.google.firebase:firebase-database:20.3.0\")\r\n    implementation (\"com.google.firebase:firebase-firestore:24.10.0\")\r\n    implementation (\"com.firebaseui:firebase-ui-storage:8.0.2\")\r\n    implementation(\"com.google.firebase:firebase-auth:22.3.0\")\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
+++ b/app/build.gradle.kts	(date 1713960778835)
@@ -62,6 +62,9 @@
     implementation("androidx.fragment:fragment-ktx:1.6.2")
     implementation ("de.hdodenhof:circleimageview:3.1.0")
     implementation(libs.firebase.storage.ktx)
+    implementation(libs.play.services.maps)
+    implementation(libs.play.services.location)
+    implementation(libs.androidx.compilerCommon)
     testImplementation(libs.junit)
     androidTestImplementation(libs.androidx.junit)
     androidTestImplementation(libs.androidx.espresso.core)
@@ -91,6 +94,10 @@
     implementation ("com.google.firebase:firebase-firestore:24.10.0")
     implementation ("com.firebaseui:firebase-ui-storage:8.0.2")
     implementation("com.google.firebase:firebase-auth:22.3.0")
+    implementation("com.google.android.gms:play-services-maps:18.0.0")
+    implementation("com.google.android.gms:play-services-location:18.0.0")
+
+
 
 }
 
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
+++ /dev/null	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
@@ -1,13 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <value>
-      <entry key="Welcome">
-        <State />
-      </entry>
-      <entry key="app">
-        <State />
-      </entry>
-    </value>
-  </component>
-</project>
\ No newline at end of file
Index: app/src/main/java/com/example/foodtruck/profile/ProfileViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.foodtruck.profile\r\n\r\nimport android.net.Uri\r\nimport android.util.Log\r\nimport android.widget.Toast\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport com.example.foodtruck.signup.UserProperties\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.ValueEventListener\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport java.util.UUID\r\n\r\n\r\nclass ProfileViewModel : ViewModel() {\r\n\r\n    private val _profilePhotoUrl = MutableLiveData<String>()\r\n    val profilePhotoUrl: LiveData<String> get() = _profilePhotoUrl\r\n\r\n    private val _userName = MutableLiveData<String>()\r\n    val userName: LiveData<String> get() = _userName\r\n\r\n    private val _userComments = MutableLiveData<List<Comment>>()\r\n    val userComments: LiveData<List<Comment>> get() = _userComments\r\n\r\n    private val storage = FirebaseStorage.getInstance()\r\n    private val database = FirebaseDatabase.getInstance()\r\n    private val currentUser = FirebaseAuth.getInstance().currentUser\r\n\r\n    fun fetchUserComments() {\r\n       // Log.d(\"TAG\",\"hello\")\r\n        currentUser?.uid?.let { userId ->\r\n            val commentsRef = database.getReference(\"posts\").orderByChild(\"userId\").equalTo(userId)\r\n            commentsRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(snapshot: DataSnapshot) {\r\n                    val commentsList = mutableListOf<Comment>()\r\n                    for (commentSnapshot in snapshot.children) {\r\n                        val commentId = commentSnapshot.key ?: \"\"\r\n                        val placeName = commentSnapshot.child(\"placeName\").getValue(String::class.java) ?: \"\"\r\n                        val commentText = commentSnapshot.child(\"comment\").getValue(String::class.java) ?: \"\"\r\n                        val photoUrl = commentSnapshot.child(\"photo\").getValue(String::class.java) ?: \"\"\r\n                        val comment = Comment(commentId,placeName, commentText, photoUrl)\r\n                        commentsList.add(comment)\r\n                    }\r\n                    Log.d(\"TAG\",\"commentsList:$commentsList\")\r\n                    _userComments.value = commentsList\r\n                }\r\n\r\n                override fun onCancelled(error: DatabaseError) {\r\n                    // Handle database error\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    fun fetchProfilePhoto(defaultPhotoUri: Uri) {\r\n        if (currentUser != null) {\r\n            val userId = currentUser.uid\r\n            val photoRef = storage.reference.child(\"profile_photos/$userId.jpg\")\r\n\r\n            // Check if the profile photo exists\r\n            photoRef.metadata.addOnSuccessListener { metadata ->\r\n                if (metadata != null && metadata.sizeBytes > 0) {\r\n                    // Profile photo exists, fetch its download URL\r\n                    photoRef.downloadUrl.addOnSuccessListener { uri ->\r\n                        _profilePhotoUrl.value = uri.toString()\r\n                    }.addOnFailureListener {\r\n                        // Handle failure to fetch download URL\r\n                        _profilePhotoUrl.value = defaultPhotoUri.toString()\r\n                    }\r\n                } else {\r\n                    // Profile photo doesn't exist, use default photo\r\n                    _profilePhotoUrl.value = defaultPhotoUri.toString()\r\n                }\r\n            }.addOnFailureListener {\r\n                // Handle failure to retrieve metadata\r\n                _profilePhotoUrl.value = defaultPhotoUri.toString()\r\n            }\r\n        } else {\r\n            // Handle the case when currentUser is null (user not logged in)\r\n            println(\"currentUser is null\")\r\n        }\r\n    }\r\n\r\n\r\n    fun fetchUserName() {\r\n        currentUser?.uid?.let { userId ->\r\n            val databaseRef = FirebaseDatabase.getInstance().getReference(\"Users\").child(userId)\r\n            databaseRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(snapshot: DataSnapshot) {\r\n                    val name = snapshot.child(\"fullName\").value.toString()\r\n                    // Update UI with the retrieved name\r\n                    _userName.value = name\r\n                }\r\n\r\n                override fun onCancelled(error: DatabaseError) {\r\n                    // Handle database error\r\n\r\n                }\r\n            })\r\n        }\r\n    }\r\n    fun fetchUserEmail(): String? {\r\n        return currentUser?.email\r\n    }\r\n    fun uploadProfileImage(userMetaData: UserMetaData, imageUri: Uri) {\r\n        val userId = currentUser?.uid\r\n        userId?.let {\r\n            val photoRef = storage.reference.child(\"profile_photos/$userId.jpg\")\r\n            photoRef.putFile(imageUri)\r\n                .addOnSuccessListener {\r\n                    // Photo upload successful, fetch its download URL\r\n                    photoRef.downloadUrl.addOnSuccessListener { uri ->\r\n                        // Update user's profile photo URL in Firebase Realtime Database\r\n                        val databaseRef = FirebaseDatabase.getInstance().getReference(\"Users\").child(userId)\r\n                        databaseRef.child(\"profilePhoto\").setValue(uri.toString())\r\n                            .addOnSuccessListener {\r\n                                // Profile photo URL updated successfully\r\n                                _profilePhotoUrl.value = uri.toString()\r\n                            }.addOnFailureListener {\r\n                                // Handle failure to update profile photo URL in database\r\n\r\n\r\n                            }\r\n                    }\r\n                }\r\n                .addOnFailureListener {\r\n                    // Handle failure to upload photo\r\n                    Log.d(\"TAG\", \"Failed to upload profile photo: ${it.message}\")\r\n                }\r\n        }\r\n    }\r\n\r\n    fun updateUserName(userMetaData: UserMetaData, newName: String) {\r\n        val userId = currentUser?.uid\r\n        userId?.let {\r\n            val databaseRef = FirebaseDatabase.getInstance().getReference(\"Users\").child(userId)\r\n            databaseRef.child(\"fullName\").setValue(newName)\r\n                .addOnSuccessListener {\r\n                    // User name updated successfully\r\n                    Log.d(\"TAG\", \"_userName: ${_userName.value}\")\r\n                    _userName.value = newName\r\n                    Log.d(\"TAG\", \"_userName: ${_userName.value}\")\r\n                }\r\n                .addOnFailureListener {\r\n                    // Handle failure to update user name\r\n                }\r\n        }\r\n    }\r\n\r\n    fun deleteComment(commentId: String) {\r\n        // Get a reference to the comments node in the database\r\n        val commentsRef = database.getReference(\"posts\")\r\n\r\n        // Delete the comment with the specified commentId\r\n        commentsRef.child(commentId).removeValue()\r\n            .addOnSuccessListener {\r\n                // Comment deleted successfully\r\n                Log.d(\"ProfileViewModel\", \"Comment deleted successfully\")\r\n                // Remove the deleted comment from the userComments LiveData\r\n                val updatedCommentsList = _userComments.value.orEmpty().toMutableList()\r\n                updatedCommentsList.removeAll { it.commentId == commentId }\r\n                _userComments.value = updatedCommentsList\r\n            }\r\n            .addOnFailureListener { exception ->\r\n                // Failed to delete comment\r\n                Log.e(\"ProfileViewModel\", \"Error deleting comment\", exception)\r\n            }\r\n\r\n    }\r\n\r\n    fun updateComment(updatedComment: Comment) {\r\n        // Get a reference to the comments node in the database\r\n        val commentsRef = database.getReference(\"posts\")\r\n\r\n        // Create a map to hold the updated properties\r\n        val commentUpdates = HashMap<String, Any>()\r\n\r\n        // Update the specific properties you want to change\r\n        commentUpdates[\"comment\"] = updatedComment.comment\r\n        commentUpdates[\"photo\"] = updatedComment.photo\r\n        // Update the comment with the specified commentId\r\n        commentsRef.child(updatedComment.commentId).updateChildren(commentUpdates)\r\n            .addOnSuccessListener {\r\n                // Comment updated successfully\r\n                Log.d(\"ProfileViewModel\", \"Comment updated successfully\")\r\n\r\n                // Update the comment in the userComments LiveData\r\n                val updatedCommentsList = _userComments.value.orEmpty().toMutableList()\r\n                val index = updatedCommentsList.indexOfFirst { it.commentId == updatedComment.commentId }\r\n                if (index != -1) {\r\n                    updatedCommentsList[index] = updatedComment\r\n                    _userComments.value = updatedCommentsList\r\n                }\r\n            }\r\n            .addOnFailureListener { exception ->\r\n                // Failed to update comment\r\n                Log.e(\"ProfileViewModel\", \"Error updating comment\", exception)\r\n            }\r\n    }\r\n\r\n    fun uploadImageToFirebaseStorage(imageUri: Uri, callback: (String) -> Unit) {\r\n        val storageRef = FirebaseStorage.getInstance().reference\r\n        val imagesRef = storageRef.child(\"images/${UUID.randomUUID()}_${imageUri.lastPathSegment}\")\r\n        val uploadTask = imagesRef.putFile(imageUri)\r\n\r\n        uploadTask.continueWithTask { task ->\r\n            if (!task.isSuccessful) {\r\n                task.exception?.let {\r\n                    throw it\r\n                }\r\n            }\r\n            imagesRef.downloadUrl\r\n        }.addOnCompleteListener { task ->\r\n            if (task.isSuccessful) {\r\n                val downloadUri = task.result\r\n                callback(downloadUri.toString())\r\n            } else {\r\n                // Handle the error\r\n                task.exception?.message?.let {\r\n                    // Show error message to the user\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/profile/ProfileViewModel.kt b/app/src/main/java/com/example/foodtruck/profile/ProfileViewModel.kt
--- a/app/src/main/java/com/example/foodtruck/profile/ProfileViewModel.kt	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
+++ b/app/src/main/java/com/example/foodtruck/profile/ProfileViewModel.kt	(date 1713960589646)
@@ -229,4 +229,5 @@
         }
     }
 
+
 }
Index: .gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/sources/org/gradle/accessors/dm/LibrariesForLibs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/sources/org/gradle/accessors/dm/LibrariesForLibs.java b/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/sources/org/gradle/accessors/dm/LibrariesForLibs.java
new file mode 100644
--- /dev/null	(date 1713960589519)
+++ b/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/sources/org/gradle/accessors/dm/LibrariesForLibs.java	(date 1713960589519)
@@ -0,0 +1,499 @@
+package org.gradle.accessors.dm;
+
+import org.gradle.api.NonNullApi;
+import org.gradle.api.artifacts.MinimalExternalModuleDependency;
+import org.gradle.plugin.use.PluginDependency;
+import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
+import org.gradle.api.artifacts.MutableVersionConstraint;
+import org.gradle.api.provider.Provider;
+import org.gradle.api.model.ObjectFactory;
+import org.gradle.api.provider.ProviderFactory;
+import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
+import org.gradle.api.internal.catalog.DefaultVersionCatalog;
+import java.util.Map;
+import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
+import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
+import javax.inject.Inject;
+
+/**
+ * A catalog of dependencies accessible via the `libs` extension.
+ */
+@NonNullApi
+public class LibrariesForLibs extends AbstractExternalDependencyFactory {
+
+    private final AbstractExternalDependencyFactory owner = this;
+    private final AndroidxLibraryAccessors laccForAndroidxLibraryAccessors = new AndroidxLibraryAccessors(owner);
+    private final FirebaseLibraryAccessors laccForFirebaseLibraryAccessors = new FirebaseLibraryAccessors(owner);
+    private final GoogleLibraryAccessors laccForGoogleLibraryAccessors = new GoogleLibraryAccessors(owner);
+    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
+    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
+    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
+    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
+
+    @Inject
+    public LibrariesForLibs(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
+        super(config, providers, objects, attributesFactory, capabilityNotationParser);
+    }
+
+        /**
+         * Creates a dependency provider for junit (junit:junit)
+         * This dependency was declared in catalog libs.versions.toml
+         */
+        public Provider<MinimalExternalModuleDependency> getJunit() {
+            return create("junit");
+    }
+
+        /**
+         * Creates a dependency provider for material (com.google.android.material:material)
+         * This dependency was declared in catalog libs.versions.toml
+         */
+        public Provider<MinimalExternalModuleDependency> getMaterial() {
+            return create("material");
+    }
+
+    /**
+     * Returns the group of libraries at androidx
+     */
+    public AndroidxLibraryAccessors getAndroidx() {
+        return laccForAndroidxLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at firebase
+     */
+    public FirebaseLibraryAccessors getFirebase() {
+        return laccForFirebaseLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at google
+     */
+    public GoogleLibraryAccessors getGoogle() {
+        return laccForGoogleLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at play
+     */
+    public PlayLibraryAccessors getPlay() {
+        return laccForPlayLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of versions at versions
+     */
+    public VersionAccessors getVersions() {
+        return vaccForVersionAccessors;
+    }
+
+    /**
+     * Returns the group of bundles at bundles
+     */
+    public BundleAccessors getBundles() {
+        return baccForBundleAccessors;
+    }
+
+    /**
+     * Returns the group of plugins at plugins
+     */
+    public PluginAccessors getPlugins() {
+        return paccForPluginAccessors;
+    }
+
+    public static class AndroidxLibraryAccessors extends SubDependencyFactory {
+        private final AndroidxCoreLibraryAccessors laccForAndroidxCoreLibraryAccessors = new AndroidxCoreLibraryAccessors(owner);
+        private final AndroidxEspressoLibraryAccessors laccForAndroidxEspressoLibraryAccessors = new AndroidxEspressoLibraryAccessors(owner);
+        private final AndroidxRoomLibraryAccessors laccForAndroidxRoomLibraryAccessors = new AndroidxRoomLibraryAccessors(owner);
+
+        public AndroidxLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for activity (androidx.activity:activity)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getActivity() {
+                return create("androidx.activity");
+        }
+
+            /**
+             * Creates a dependency provider for appcompat (androidx.appcompat:appcompat)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getAppcompat() {
+                return create("androidx.appcompat");
+        }
+
+            /**
+             * Creates a dependency provider for constraintlayout (androidx.constraintlayout:constraintlayout)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
+                return create("androidx.constraintlayout");
+        }
+
+            /**
+             * Creates a dependency provider for junit (androidx.test.ext:junit)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getJunit() {
+                return create("androidx.junit");
+        }
+
+        /**
+         * Returns the group of libraries at androidx.core
+         */
+        public AndroidxCoreLibraryAccessors getCore() {
+            return laccForAndroidxCoreLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.espresso
+         */
+        public AndroidxEspressoLibraryAccessors getEspresso() {
+            return laccForAndroidxEspressoLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.room
+         */
+        public AndroidxRoomLibraryAccessors getRoom() {
+            return laccForAndroidxRoomLibraryAccessors;
+        }
+
+    }
+
+    public static class AndroidxCoreLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxCoreLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.core:core-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("androidx.core.ktx");
+        }
+
+    }
+
+    public static class AndroidxEspressoLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxEspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for core (androidx.test.espresso:espresso-core)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCore() {
+                return create("androidx.espresso.core");
+        }
+
+    }
+
+    public static class AndroidxRoomLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxRoomLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for common (androidx.room:room-common)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCommon() {
+                return create("androidx.room.common");
+        }
+
+            /**
+             * Creates a dependency provider for compiler (androidx.room:room-compiler)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCompiler() {
+                return create("androidx.room.compiler");
+        }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.room:room-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("androidx.room.ktx");
+        }
+
+    }
+
+    public static class FirebaseLibraryAccessors extends SubDependencyFactory {
+        private final FirebaseStorageLibraryAccessors laccForFirebaseStorageLibraryAccessors = new FirebaseStorageLibraryAccessors(owner);
+
+        public FirebaseLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for auth (com.google.firebase:firebase-auth)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getAuth() {
+                return create("firebase.auth");
+        }
+
+            /**
+             * Creates a dependency provider for database (com.google.firebase:firebase-database)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getDatabase() {
+                return create("firebase.database");
+        }
+
+            /**
+             * Creates a dependency provider for firestore (com.google.firebase:firebase-firestore)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getFirestore() {
+                return create("firebase.firestore");
+        }
+
+        /**
+         * Returns the group of libraries at firebase.storage
+         */
+        public FirebaseStorageLibraryAccessors getStorage() {
+            return laccForFirebaseStorageLibraryAccessors;
+        }
+
+    }
+
+    public static class FirebaseStorageLibraryAccessors extends SubDependencyFactory {
+
+        public FirebaseStorageLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (com.google.firebase:firebase-storage-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("firebase.storage.ktx");
+        }
+
+    }
+
+    public static class GoogleLibraryAccessors extends SubDependencyFactory {
+
+        public GoogleLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for services (com.google.gms:google-services)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getServices() {
+                return create("google.services");
+        }
+
+    }
+
+    public static class PlayLibraryAccessors extends SubDependencyFactory {
+        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
+
+        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+        /**
+         * Returns the group of libraries at play.services
+         */
+        public PlayServicesLibraryAccessors getServices() {
+            return laccForPlayServicesLibraryAccessors;
+        }
+
+    }
+
+    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
+
+        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for maps (com.google.android.gms:play-services-maps)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getMaps() {
+                return create("play.services.maps");
+        }
+
+    }
+
+    public static class VersionAccessors extends VersionFactory  {
+
+        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Returns the version associated to this alias: activity (1.8.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getActivity() { return getVersion("activity"); }
+
+            /**
+             * Returns the version associated to this alias: agp (8.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAgp() { return getVersion("agp"); }
+
+            /**
+             * Returns the version associated to this alias: appcompat (1.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAppcompat() { return getVersion("appcompat"); }
+
+            /**
+             * Returns the version associated to this alias: constraintlayout (2.1.4)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
+
+            /**
+             * Returns the version associated to this alias: coreKtx (1.10.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getCoreKtx() { return getVersion("coreKtx"); }
+
+            /**
+             * Returns the version associated to this alias: espressoCore (3.5.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseAuth (22.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseAuth() { return getVersion("firebaseAuth"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseDatabase (20.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseDatabase() { return getVersion("firebaseDatabase"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseFirestore (24.10.3)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseFirestore() { return getVersion("firebaseFirestore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseStorageKtx (20.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseStorageKtx() { return getVersion("firebaseStorageKtx"); }
+
+            /**
+             * Returns the version associated to this alias: googleServices (4.4.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getGoogleServices() { return getVersion("googleServices"); }
+
+            /**
+             * Returns the version associated to this alias: junit (4.13.2)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunit() { return getVersion("junit"); }
+
+            /**
+             * Returns the version associated to this alias: junitVersion (1.1.5)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
+
+            /**
+             * Returns the version associated to this alias: kotlin (1.9.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getKotlin() { return getVersion("kotlin"); }
+
+            /**
+             * Returns the version associated to this alias: material (1.10.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getMaterial() { return getVersion("material"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesMaps (18.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesMaps() { return getVersion("playServicesMaps"); }
+
+            /**
+             * Returns the version associated to this alias: roomCommon (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCommon() { return getVersion("roomCommon"); }
+
+            /**
+             * Returns the version associated to this alias: roomCompiler (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCompiler() { return getVersion("roomCompiler"); }
+
+            /**
+             * Returns the version associated to this alias: roomKtx (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomKtx() { return getVersion("roomKtx"); }
+
+    }
+
+    public static class BundleAccessors extends BundleFactory {
+
+        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
+
+    }
+
+    public static class PluginAccessors extends PluginFactory {
+
+        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Creates a plugin provider for androidApplication to the plugin id 'com.android.application'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getAndroidApplication() { return createPlugin("androidApplication"); }
+
+            /**
+             * Creates a plugin provider for jetbrainsKotlinAndroid to the plugin id 'org.jetbrains.kotlin.android'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getJetbrainsKotlinAndroid() { return createPlugin("jetbrainsKotlinAndroid"); }
+
+    }
+
+}
Index: app/src/main/java/com/example/foodtruck/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.foodtruck\r\n\r\nimport android.os.Bundle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.fragment.NavHostFragment\r\nimport androidx.navigation.ui.NavigationUI\r\nimport com.example.foodtruck.databinding.ActivityMainBinding // Assuming you are using View Binding\r\nimport com.example.foodtruck.utils.Utils\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    private lateinit var binding: ActivityMainBinding\r\n    private lateinit var navController: NavController\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        // Setup the nav controller for use with the NavHostFragment\r\n        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment\r\n        navController = navHostFragment.navController\r\n\r\n        // If you have a Toolbar, ActionBar, or BottomNavigationView, set them up with the navController here\r\n        // Example for a Toolbar\r\n        // setSupportActionBar(binding.toolbar)\r\n        // NavigationUI.setupActionBarWithNavController(this, navController)\r\n\r\n        // Example for BottomNavigationView\r\n        // NavigationUI.setupWithNavController(binding.bottomNav, navController)\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        return navController.navigateUp() || super.onSupportNavigateUp()\r\n        }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/foodtruck/MainActivity.kt b/app/src/main/java/com/example/foodtruck/MainActivity.kt
--- a/app/src/main/java/com/example/foodtruck/MainActivity.kt	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
+++ b/app/src/main/java/com/example/foodtruck/MainActivity.kt	(date 1713960589633)
@@ -19,7 +19,6 @@
         super.onCreate(savedInstanceState)
         binding = ActivityMainBinding.inflate(layoutInflater)
         setContentView(binding.root)
-
         // Setup the nav controller for use with the NavHostFragment
         val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment
         navController = navHostFragment.navController
@@ -31,6 +30,7 @@
 
         // Example for BottomNavigationView
         // NavigationUI.setupWithNavController(binding.bottomNav, navController)
+
     }
 
     override fun onSupportNavigateUp(): Boolean {
Index: .gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/sources/org/gradle/accessors/dm/LibrariesForLibs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/sources/org/gradle/accessors/dm/LibrariesForLibs.java b/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/sources/org/gradle/accessors/dm/LibrariesForLibs.java
new file mode 100644
--- /dev/null	(date 1713960589421)
+++ b/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/sources/org/gradle/accessors/dm/LibrariesForLibs.java	(date 1713960589421)
@@ -0,0 +1,513 @@
+package org.gradle.accessors.dm;
+
+import org.gradle.api.NonNullApi;
+import org.gradle.api.artifacts.MinimalExternalModuleDependency;
+import org.gradle.plugin.use.PluginDependency;
+import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
+import org.gradle.api.artifacts.MutableVersionConstraint;
+import org.gradle.api.provider.Provider;
+import org.gradle.api.model.ObjectFactory;
+import org.gradle.api.provider.ProviderFactory;
+import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
+import org.gradle.api.internal.catalog.DefaultVersionCatalog;
+import java.util.Map;
+import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
+import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
+import javax.inject.Inject;
+
+/**
+ * A catalog of dependencies accessible via the `libs` extension.
+ */
+@NonNullApi
+public class LibrariesForLibs extends AbstractExternalDependencyFactory {
+
+    private final AbstractExternalDependencyFactory owner = this;
+    private final AndroidxLibraryAccessors laccForAndroidxLibraryAccessors = new AndroidxLibraryAccessors(owner);
+    private final FirebaseLibraryAccessors laccForFirebaseLibraryAccessors = new FirebaseLibraryAccessors(owner);
+    private final GoogleLibraryAccessors laccForGoogleLibraryAccessors = new GoogleLibraryAccessors(owner);
+    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
+    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
+    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
+    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
+
+    @Inject
+    public LibrariesForLibs(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
+        super(config, providers, objects, attributesFactory, capabilityNotationParser);
+    }
+
+        /**
+         * Creates a dependency provider for junit (junit:junit)
+         * This dependency was declared in catalog libs.versions.toml
+         */
+        public Provider<MinimalExternalModuleDependency> getJunit() {
+            return create("junit");
+    }
+
+        /**
+         * Creates a dependency provider for material (com.google.android.material:material)
+         * This dependency was declared in catalog libs.versions.toml
+         */
+        public Provider<MinimalExternalModuleDependency> getMaterial() {
+            return create("material");
+    }
+
+    /**
+     * Returns the group of libraries at androidx
+     */
+    public AndroidxLibraryAccessors getAndroidx() {
+        return laccForAndroidxLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at firebase
+     */
+    public FirebaseLibraryAccessors getFirebase() {
+        return laccForFirebaseLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at google
+     */
+    public GoogleLibraryAccessors getGoogle() {
+        return laccForGoogleLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at play
+     */
+    public PlayLibraryAccessors getPlay() {
+        return laccForPlayLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of versions at versions
+     */
+    public VersionAccessors getVersions() {
+        return vaccForVersionAccessors;
+    }
+
+    /**
+     * Returns the group of bundles at bundles
+     */
+    public BundleAccessors getBundles() {
+        return baccForBundleAccessors;
+    }
+
+    /**
+     * Returns the group of plugins at plugins
+     */
+    public PluginAccessors getPlugins() {
+        return paccForPluginAccessors;
+    }
+
+    public static class AndroidxLibraryAccessors extends SubDependencyFactory {
+        private final AndroidxCoreLibraryAccessors laccForAndroidxCoreLibraryAccessors = new AndroidxCoreLibraryAccessors(owner);
+        private final AndroidxEspressoLibraryAccessors laccForAndroidxEspressoLibraryAccessors = new AndroidxEspressoLibraryAccessors(owner);
+        private final AndroidxRoomLibraryAccessors laccForAndroidxRoomLibraryAccessors = new AndroidxRoomLibraryAccessors(owner);
+
+        public AndroidxLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for activity (androidx.activity:activity)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getActivity() {
+                return create("androidx.activity");
+        }
+
+            /**
+             * Creates a dependency provider for appcompat (androidx.appcompat:appcompat)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getAppcompat() {
+                return create("androidx.appcompat");
+        }
+
+            /**
+             * Creates a dependency provider for constraintlayout (androidx.constraintlayout:constraintlayout)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
+                return create("androidx.constraintlayout");
+        }
+
+            /**
+             * Creates a dependency provider for junit (androidx.test.ext:junit)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getJunit() {
+                return create("androidx.junit");
+        }
+
+        /**
+         * Returns the group of libraries at androidx.core
+         */
+        public AndroidxCoreLibraryAccessors getCore() {
+            return laccForAndroidxCoreLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.espresso
+         */
+        public AndroidxEspressoLibraryAccessors getEspresso() {
+            return laccForAndroidxEspressoLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.room
+         */
+        public AndroidxRoomLibraryAccessors getRoom() {
+            return laccForAndroidxRoomLibraryAccessors;
+        }
+
+    }
+
+    public static class AndroidxCoreLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxCoreLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.core:core-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("androidx.core.ktx");
+        }
+
+    }
+
+    public static class AndroidxEspressoLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxEspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for core (androidx.test.espresso:espresso-core)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCore() {
+                return create("androidx.espresso.core");
+        }
+
+    }
+
+    public static class AndroidxRoomLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxRoomLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for common (androidx.room:room-common)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCommon() {
+                return create("androidx.room.common");
+        }
+
+            /**
+             * Creates a dependency provider for compiler (androidx.room:room-compiler)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCompiler() {
+                return create("androidx.room.compiler");
+        }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.room:room-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("androidx.room.ktx");
+        }
+
+    }
+
+    public static class FirebaseLibraryAccessors extends SubDependencyFactory {
+        private final FirebaseStorageLibraryAccessors laccForFirebaseStorageLibraryAccessors = new FirebaseStorageLibraryAccessors(owner);
+
+        public FirebaseLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for auth (com.google.firebase:firebase-auth)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getAuth() {
+                return create("firebase.auth");
+        }
+
+            /**
+             * Creates a dependency provider for database (com.google.firebase:firebase-database)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getDatabase() {
+                return create("firebase.database");
+        }
+
+            /**
+             * Creates a dependency provider for firestore (com.google.firebase:firebase-firestore)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getFirestore() {
+                return create("firebase.firestore");
+        }
+
+        /**
+         * Returns the group of libraries at firebase.storage
+         */
+        public FirebaseStorageLibraryAccessors getStorage() {
+            return laccForFirebaseStorageLibraryAccessors;
+        }
+
+    }
+
+    public static class FirebaseStorageLibraryAccessors extends SubDependencyFactory {
+
+        public FirebaseStorageLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (com.google.firebase:firebase-storage-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("firebase.storage.ktx");
+        }
+
+    }
+
+    public static class GoogleLibraryAccessors extends SubDependencyFactory {
+
+        public GoogleLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for services (com.google.gms:google-services)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getServices() {
+                return create("google.services");
+        }
+
+    }
+
+    public static class PlayLibraryAccessors extends SubDependencyFactory {
+        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
+
+        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+        /**
+         * Returns the group of libraries at play.services
+         */
+        public PlayServicesLibraryAccessors getServices() {
+            return laccForPlayServicesLibraryAccessors;
+        }
+
+    }
+
+    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
+
+        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for maps (com.google.android.gms:play-services-maps)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getMaps() {
+                return create("play.services.maps");
+        }
+
+    }
+
+    public static class VersionAccessors extends VersionFactory  {
+
+        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Returns the version associated to this alias: activity (1.8.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getActivity() { return getVersion("activity"); }
+
+            /**
+             * Returns the version associated to this alias: agp (8.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAgp() { return getVersion("agp"); }
+
+            /**
+             * Returns the version associated to this alias: appcompat (1.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAppcompat() { return getVersion("appcompat"); }
+
+            /**
+             * Returns the version associated to this alias: constraintlayout (2.1.4)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
+
+            /**
+             * Returns the version associated to this alias: coreKtx (1.10.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getCoreKtx() { return getVersion("coreKtx"); }
+
+            /**
+             * Returns the version associated to this alias: espressoCore (3.5.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseAuth (22.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseAuth() { return getVersion("firebaseAuth"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseDatabase (20.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseDatabase() { return getVersion("firebaseDatabase"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseFirestore (24.10.3)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseFirestore() { return getVersion("firebaseFirestore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseStorageKtx (20.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseStorageKtx() { return getVersion("firebaseStorageKtx"); }
+
+            /**
+             * Returns the version associated to this alias: googleAndroidLibrariesMapsplatformSecretsGradlePlugin (2.0.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getGoogleAndroidLibrariesMapsplatformSecretsGradlePlugin() { return getVersion("googleAndroidLibrariesMapsplatformSecretsGradlePlugin"); }
+
+            /**
+             * Returns the version associated to this alias: googleServices (4.4.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getGoogleServices() { return getVersion("googleServices"); }
+
+            /**
+             * Returns the version associated to this alias: junit (4.13.2)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunit() { return getVersion("junit"); }
+
+            /**
+             * Returns the version associated to this alias: junitVersion (1.1.5)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
+
+            /**
+             * Returns the version associated to this alias: kotlin (1.9.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getKotlin() { return getVersion("kotlin"); }
+
+            /**
+             * Returns the version associated to this alias: material (1.10.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getMaterial() { return getVersion("material"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesMaps (18.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesMaps() { return getVersion("playServicesMaps"); }
+
+            /**
+             * Returns the version associated to this alias: roomCommon (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCommon() { return getVersion("roomCommon"); }
+
+            /**
+             * Returns the version associated to this alias: roomCompiler (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCompiler() { return getVersion("roomCompiler"); }
+
+            /**
+             * Returns the version associated to this alias: roomKtx (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomKtx() { return getVersion("roomKtx"); }
+
+    }
+
+    public static class BundleAccessors extends BundleFactory {
+
+        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
+
+    }
+
+    public static class PluginAccessors extends PluginFactory {
+
+        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Creates a plugin provider for androidApplication to the plugin id 'com.android.application'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getAndroidApplication() { return createPlugin("androidApplication"); }
+
+            /**
+             * Creates a plugin provider for googleAndroidLibrariesMapsplatformSecretsGradlePlugin to the plugin id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getGoogleAndroidLibrariesMapsplatformSecretsGradlePlugin() { return createPlugin("googleAndroidLibrariesMapsplatformSecretsGradlePlugin"); }
+
+            /**
+             * Creates a plugin provider for jetbrainsKotlinAndroid to the plugin id 'org.jetbrains.kotlin.android'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getJetbrainsKotlinAndroid() { return createPlugin("jetbrainsKotlinAndroid"); }
+
+    }
+
+}
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/shelved.patch
new file mode 100644
--- /dev/null	(date 1713960589622)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/shelved.patch	(date 1713960589622)
@@ -0,0 +1,33 @@
+Index: local.properties
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>## This file must *NOT* be checked into Version Control Systems,\n# as it contains information specific to your local configuration.\n#\n# Location of the SDK. This is only used by Gradle.\n# For customization when using a Version Control System, please read the\n# header note.\n#Sun Apr 14 19:10:01 IDT 2024\nsdk.dir=C\\:\\\\Users\\\\DELL\\\\AppData\\\\Local\\\\Android\\\\Sdk\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>ISO-8859-1
+===================================================================
+diff --git a/local.properties b/local.properties
+--- a/local.properties	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
++++ b/local.properties	(date 1713705210432)
+@@ -4,5 +4,5 @@
+ # Location of the SDK. This is only used by Gradle.
+ # For customization when using a Version Control System, please read the
+ # header note.
+-#Sun Apr 14 19:10:01 IDT 2024
+-sdk.dir=C\:\\Users\\DELL\\AppData\\Local\\Android\\Sdk
++#Sun Apr 21 16:05:41 IDT 2024
++sdk.dir=/Users/ilaycohen/Library/Android/sdk
+Index: .gradle/config.properties
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>#Sun Apr 14 17:35:36 IDT 2024\njava.home=C\\:\\\\Program Files\\\\Android\\\\Android Studio\\\\jbr\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>ISO-8859-1
+===================================================================
+diff --git a/.gradle/config.properties b/.gradle/config.properties
+--- a/.gradle/config.properties	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
++++ b/.gradle/config.properties	(date 1713705210434)
+@@ -1,2 +1,2 @@
+-#Sun Apr 14 17:35:36 IDT 2024
+-java.home=C\:\\Program Files\\Android\\Android Studio\\jbr
++#Sun Apr 21 16:05:31 IDT 2024
++java.home=/Applications/Android Studio.app/Contents/jbr/Contents/Home
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.Foodtruck\"\r\n        tools:targetApi=\"31\">\r\n\r\n        <!-- Set Welcome as the launcher activity -->\r\n        <activity android:name=\".Welcome\"\r\n            android:exported=\"true\"> <!-- This needs to be true for the launcher activity -->\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\"> <!-- Ensure this is true if you're navigating to it explicitly -->\r\n        </activity>\r\n\r\n        <!-- LoginActivity and SignUpActivity -->\r\n        <activity\r\n            android:name=\".login.LoginActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".signup.SignUpActivity\"\r\n            android:exported=\"false\" />\r\n\r\n    </application>\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
+++ b/app/src/main/AndroidManifest.xml	(date 1713960589630)
@@ -1,8 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools">
+
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.INTERNET" />
-
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
     <application
         android:allowBackup="true"
         android:dataExtractionRules="@xml/data_extraction_rules"
@@ -35,6 +37,9 @@
         <activity
             android:name=".signup.SignUpActivity"
             android:exported="false" />
+        <meta-data
+            android:name="com.google.android.geo.API_KEY"
+            android:value="@string/my_map_api_key" />
 
     </application>
 </manifest>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1713960589577)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]/shelved.patch	(date 1713960589577)
@@ -0,0 +1,33 @@
+Index: local.properties
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>## This file must *NOT* be checked into Version Control Systems,\n# as it contains information specific to your local configuration.\n#\n# Location of the SDK. This is only used by Gradle.\n# For customization when using a Version Control System, please read the\n# header note.\n#Sun Apr 14 19:10:01 IDT 2024\nsdk.dir=C\\:\\\\Users\\\\DELL\\\\AppData\\\\Local\\\\Android\\\\Sdk\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>ISO-8859-1
+===================================================================
+diff --git a/local.properties b/local.properties
+--- a/local.properties	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
++++ b/local.properties	(date 1713704741555)
+@@ -4,5 +4,5 @@
+ # Location of the SDK. This is only used by Gradle.
+ # For customization when using a Version Control System, please read the
+ # header note.
+-#Sun Apr 14 19:10:01 IDT 2024
+-sdk.dir=C\:\\Users\\DELL\\AppData\\Local\\Android\\Sdk
++#Sun Apr 21 16:05:41 IDT 2024
++sdk.dir=/Users/ilaycohen/Library/Android/sdk
+Index: .gradle/config.properties
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>#Sun Apr 14 17:35:36 IDT 2024\njava.home=C\\:\\\\Program Files\\\\Android\\\\Android Studio\\\\jbr\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>ISO-8859-1
+===================================================================
+diff --git a/.gradle/config.properties b/.gradle/config.properties
+--- a/.gradle/config.properties	(revision 5de508b0ccd1ddd0e4a3fe395f3048e304165ef3)
++++ b/.gradle/config.properties	(date 1713704731133)
+@@ -1,2 +1,2 @@
+-#Sun Apr 14 17:35:36 IDT 2024
+-java.home=C\:\\Program Files\\Android\\Android Studio\\jbr
++#Sun Apr 21 16:05:31 IDT 2024
++java.home=/Applications/Android Studio.app/Contents/jbr/Contents/Home
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">Food Truck</string>\r\n    <!-- TODO: Remove or change this placeholder text -->\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n    <string name=\"home\" />\r\n    <string name=\"profile\" />\r\n    <string name=\"home2\" />\r\n    <string name=\"register\">Register</string>\r\n    <string name=\"fullName\">Full name</string>\r\n    <string name=\"email\">Email</string>\r\n    <string name=\"password\">Password</string>\r\n    <string name=\"registerBtn\">Register</string>\r\n    <string name=\"LoginTitle\">Login</string>\r\n    <string name=\"loginBtn\">Login</string>\r\n    <string name=\"signUpLink\">New user? SignUp</string>\r\n    <string name=\"loginLink\">Already have an account? Login here</string>\r\n    <string name=\"title_register\">Welcome, \\n Register</string>\r\n    <string name=\"title_login\">Welcome, \\n Login</string>\r\n    <string name=\"profileTitle\">Profile</string>\r\n    <string name=\"userFullName\">Dani hagever</string>\r\n    <string name=\"userMail\">danihagever@gmail.com</string>\r\n    <string name=\"btnLogoutText\">Logout</string>\r\n    <string name=\"edit_profile_dialog_title\">Edit profile</string>\r\n    <string name=\"edit_profile_dialog_message\">Edit profile details</string>\r\n    <string name=\"save\">Save</string>\r\n    <string name=\"cancel\">Cancel</string>\r\n    <string name=\"select_profile_pic_button_text\">Browse photo</string>\r\n    <string name=\"profile_name_hint\">Full name</string>\r\n    <string name=\"go_back\"> Back </string>\r\n    <string name=\"the_comment\">The comment</string>\r\n    <string name=\"the_dish_name\">Dish name</string>\r\n    <string name=\"my_comments\">My comments</string>\r\n    <string name=\"delete_comment_button\">Delete comment</string>\r\n    <string name=\"edit_button_description\">Edit comment</string>\r\n    <string name=\"the_comment_field\">Comment</string>\r\n    <string name=\"edit_comment_dialog_title\">Edit comment</string>\r\n    <string name=\"edit_profile_description\">A pencil icon edit</string>\r\n    <string name=\"for_background\">For background</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
+++ b/app/src/main/res/values/strings.xml	(date 1713960589655)
@@ -36,4 +36,5 @@
     <string name="edit_comment_dialog_title">Edit comment</string>
     <string name="edit_profile_description">A pencil icon edit</string>
     <string name="for_background">For background</string>
+    <string name="my_map_api_key">AIzaSyDjr5dkOJVS9X346hUoBtk84XAJtRQDlWY</string>
 </resources>
\ No newline at end of file
Index: .gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/sources/org/gradle/accessors/dm/LibrariesForLibs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/sources/org/gradle/accessors/dm/LibrariesForLibs.java b/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/sources/org/gradle/accessors/dm/LibrariesForLibs.java
new file mode 100644
--- /dev/null	(date 1713960589568)
+++ b/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/sources/org/gradle/accessors/dm/LibrariesForLibs.java	(date 1713960589568)
@@ -0,0 +1,515 @@
+package org.gradle.accessors.dm;
+
+import org.gradle.api.NonNullApi;
+import org.gradle.api.artifacts.MinimalExternalModuleDependency;
+import org.gradle.plugin.use.PluginDependency;
+import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
+import org.gradle.api.artifacts.MutableVersionConstraint;
+import org.gradle.api.provider.Provider;
+import org.gradle.api.model.ObjectFactory;
+import org.gradle.api.provider.ProviderFactory;
+import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
+import org.gradle.api.internal.catalog.DefaultVersionCatalog;
+import java.util.Map;
+import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
+import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
+import javax.inject.Inject;
+
+/**
+ * A catalog of dependencies accessible via the `libs` extension.
+ */
+@NonNullApi
+public class LibrariesForLibs extends AbstractExternalDependencyFactory {
+
+    private final AbstractExternalDependencyFactory owner = this;
+    private final AndroidxLibraryAccessors laccForAndroidxLibraryAccessors = new AndroidxLibraryAccessors(owner);
+    private final FirebaseLibraryAccessors laccForFirebaseLibraryAccessors = new FirebaseLibraryAccessors(owner);
+    private final GoogleLibraryAccessors laccForGoogleLibraryAccessors = new GoogleLibraryAccessors(owner);
+    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
+    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
+    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
+    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
+
+    @Inject
+    public LibrariesForLibs(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
+        super(config, providers, objects, attributesFactory, capabilityNotationParser);
+    }
+
+        /**
+         * Creates a dependency provider for junit (junit:junit)
+         * This dependency was declared in catalog libs.versions.toml
+         */
+        public Provider<MinimalExternalModuleDependency> getJunit() {
+            return create("junit");
+    }
+
+        /**
+         * Creates a dependency provider for material (com.google.android.material:material)
+         * This dependency was declared in catalog libs.versions.toml
+         */
+        public Provider<MinimalExternalModuleDependency> getMaterial() {
+            return create("material");
+    }
+
+    /**
+     * Returns the group of libraries at androidx
+     */
+    public AndroidxLibraryAccessors getAndroidx() {
+        return laccForAndroidxLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at firebase
+     */
+    public FirebaseLibraryAccessors getFirebase() {
+        return laccForFirebaseLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at google
+     */
+    public GoogleLibraryAccessors getGoogle() {
+        return laccForGoogleLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at play
+     */
+    public PlayLibraryAccessors getPlay() {
+        return laccForPlayLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of versions at versions
+     */
+    public VersionAccessors getVersions() {
+        return vaccForVersionAccessors;
+    }
+
+    /**
+     * Returns the group of bundles at bundles
+     */
+    public BundleAccessors getBundles() {
+        return baccForBundleAccessors;
+    }
+
+    /**
+     * Returns the group of plugins at plugins
+     */
+    public PluginAccessors getPlugins() {
+        return paccForPluginAccessors;
+    }
+
+    public static class AndroidxLibraryAccessors extends SubDependencyFactory {
+        private final AndroidxCoreLibraryAccessors laccForAndroidxCoreLibraryAccessors = new AndroidxCoreLibraryAccessors(owner);
+        private final AndroidxEspressoLibraryAccessors laccForAndroidxEspressoLibraryAccessors = new AndroidxEspressoLibraryAccessors(owner);
+        private final AndroidxRoomLibraryAccessors laccForAndroidxRoomLibraryAccessors = new AndroidxRoomLibraryAccessors(owner);
+
+        public AndroidxLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for activity (androidx.activity:activity)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getActivity() {
+                return create("androidx.activity");
+        }
+
+            /**
+             * Creates a dependency provider for appcompat (androidx.appcompat:appcompat)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getAppcompat() {
+                return create("androidx.appcompat");
+        }
+
+            /**
+             * Creates a dependency provider for constraintlayout (androidx.constraintlayout:constraintlayout)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
+                return create("androidx.constraintlayout");
+        }
+
+            /**
+             * Creates a dependency provider for junit (androidx.test.ext:junit)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getJunit() {
+                return create("androidx.junit");
+        }
+
+        /**
+         * Returns the group of libraries at androidx.core
+         */
+        public AndroidxCoreLibraryAccessors getCore() {
+            return laccForAndroidxCoreLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.espresso
+         */
+        public AndroidxEspressoLibraryAccessors getEspresso() {
+            return laccForAndroidxEspressoLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.room
+         */
+        public AndroidxRoomLibraryAccessors getRoom() {
+            return laccForAndroidxRoomLibraryAccessors;
+        }
+
+    }
+
+    public static class AndroidxCoreLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxCoreLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.core:core-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("androidx.core.ktx");
+        }
+
+    }
+
+    public static class AndroidxEspressoLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxEspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for core (androidx.test.espresso:espresso-core)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCore() {
+                return create("androidx.espresso.core");
+        }
+
+    }
+
+    public static class AndroidxRoomLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxRoomLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for common (androidx.room:room-common)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCommon() {
+                return create("androidx.room.common");
+        }
+
+            /**
+             * Creates a dependency provider for compiler (androidx.room:room-compiler)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCompiler() {
+                return create("androidx.room.compiler");
+        }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.room:room-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("androidx.room.ktx");
+        }
+
+    }
+
+    public static class FirebaseLibraryAccessors extends SubDependencyFactory {
+        private final FirebaseStorageLibraryAccessors laccForFirebaseStorageLibraryAccessors = new FirebaseStorageLibraryAccessors(owner);
+
+        public FirebaseLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for auth (com.google.firebase:firebase-auth)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getAuth() {
+                return create("firebase.auth");
+        }
+
+            /**
+             * Creates a dependency provider for database (com.google.firebase:firebase-database)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getDatabase() {
+                return create("firebase.database");
+        }
+
+            /**
+             * Creates a dependency provider for firestore (com.google.firebase:firebase-firestore)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getFirestore() {
+                return create("firebase.firestore");
+        }
+
+        /**
+         * Returns the group of libraries at firebase.storage
+         */
+        public FirebaseStorageLibraryAccessors getStorage() {
+            return laccForFirebaseStorageLibraryAccessors;
+        }
+
+    }
+
+    public static class FirebaseStorageLibraryAccessors extends SubDependencyFactory {
+
+        public FirebaseStorageLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (com.google.firebase:firebase-storage-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("firebase.storage.ktx");
+        }
+
+    }
+
+    public static class GoogleLibraryAccessors extends SubDependencyFactory {
+
+        public GoogleLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for services (com.google.gms:google-services)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getServices() {
+                return create("google.services");
+        }
+
+    }
+
+    public static class PlayLibraryAccessors extends SubDependencyFactory {
+        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
+
+        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+        /**
+         * Returns the group of libraries at play.services
+         */
+        public PlayServicesLibraryAccessors getServices() {
+            return laccForPlayServicesLibraryAccessors;
+        }
+
+    }
+
+    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
+
+        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for location (com.google.android.gms:play-services-location)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getLocation() {
+                return create("play.services.location");
+        }
+
+            /**
+             * Creates a dependency provider for maps (com.google.android.gms:play-services-maps)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getMaps() {
+                return create("play.services.maps");
+        }
+
+    }
+
+    public static class VersionAccessors extends VersionFactory  {
+
+        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Returns the version associated to this alias: activity (1.8.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getActivity() { return getVersion("activity"); }
+
+            /**
+             * Returns the version associated to this alias: agp (8.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAgp() { return getVersion("agp"); }
+
+            /**
+             * Returns the version associated to this alias: appcompat (1.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAppcompat() { return getVersion("appcompat"); }
+
+            /**
+             * Returns the version associated to this alias: constraintlayout (2.1.4)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
+
+            /**
+             * Returns the version associated to this alias: coreKtx (1.10.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getCoreKtx() { return getVersion("coreKtx"); }
+
+            /**
+             * Returns the version associated to this alias: espressoCore (3.5.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseAuth (22.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseAuth() { return getVersion("firebaseAuth"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseDatabase (20.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseDatabase() { return getVersion("firebaseDatabase"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseFirestore (24.10.3)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseFirestore() { return getVersion("firebaseFirestore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseStorageKtx (20.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseStorageKtx() { return getVersion("firebaseStorageKtx"); }
+
+            /**
+             * Returns the version associated to this alias: googleServices (4.4.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getGoogleServices() { return getVersion("googleServices"); }
+
+            /**
+             * Returns the version associated to this alias: junit (4.13.2)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunit() { return getVersion("junit"); }
+
+            /**
+             * Returns the version associated to this alias: junitVersion (1.1.5)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
+
+            /**
+             * Returns the version associated to this alias: kotlin (1.9.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getKotlin() { return getVersion("kotlin"); }
+
+            /**
+             * Returns the version associated to this alias: material (1.10.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getMaterial() { return getVersion("material"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesLocation (21.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesLocation() { return getVersion("playServicesLocation"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesMaps (18.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesMaps() { return getVersion("playServicesMaps"); }
+
+            /**
+             * Returns the version associated to this alias: roomCommon (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCommon() { return getVersion("roomCommon"); }
+
+            /**
+             * Returns the version associated to this alias: roomCompiler (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCompiler() { return getVersion("roomCompiler"); }
+
+            /**
+             * Returns the version associated to this alias: roomKtx (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomKtx() { return getVersion("roomKtx"); }
+
+    }
+
+    public static class BundleAccessors extends BundleFactory {
+
+        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
+
+    }
+
+    public static class PluginAccessors extends PluginFactory {
+
+        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Creates a plugin provider for androidApplication to the plugin id 'com.android.application'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getAndroidApplication() { return createPlugin("androidApplication"); }
+
+            /**
+             * Creates a plugin provider for jetbrainsKotlinAndroid to the plugin id 'org.jetbrains.kotlin.android'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getJetbrainsKotlinAndroid() { return createPlugin("jetbrainsKotlinAndroid"); }
+
+    }
+
+}
Index: .gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java b/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
new file mode 100644
--- /dev/null	(date 1713960589520)
+++ b/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java	(date 1713960589520)
@@ -0,0 +1,620 @@
+package org.gradle.accessors.dm;
+
+import org.gradle.api.NonNullApi;
+import org.gradle.api.artifacts.MinimalExternalModuleDependency;
+import org.gradle.plugin.use.PluginDependency;
+import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
+import org.gradle.api.artifacts.MutableVersionConstraint;
+import org.gradle.api.provider.Provider;
+import org.gradle.api.model.ObjectFactory;
+import org.gradle.api.provider.ProviderFactory;
+import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
+import org.gradle.api.internal.catalog.DefaultVersionCatalog;
+import java.util.Map;
+import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
+import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
+import javax.inject.Inject;
+
+/**
+ * A catalog of dependencies accessible via the `libs` extension.
+ */
+@NonNullApi
+public class LibrariesForLibsInPluginsBlock extends AbstractExternalDependencyFactory {
+
+    private final AbstractExternalDependencyFactory owner = this;
+    private final AndroidxLibraryAccessors laccForAndroidxLibraryAccessors = new AndroidxLibraryAccessors(owner);
+    private final FirebaseLibraryAccessors laccForFirebaseLibraryAccessors = new FirebaseLibraryAccessors(owner);
+    private final GoogleLibraryAccessors laccForGoogleLibraryAccessors = new GoogleLibraryAccessors(owner);
+    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
+    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
+    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
+    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
+
+    @Inject
+    public LibrariesForLibsInPluginsBlock(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
+        super(config, providers, objects, attributesFactory, capabilityNotationParser);
+    }
+
+        /**
+         * Creates a dependency provider for junit (junit:junit)
+         * This dependency was declared in catalog libs.versions.toml
+     * @deprecated Will be removed in Gradle 9.0.
+         */
+    @Deprecated
+        public Provider<MinimalExternalModuleDependency> getJunit() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return create("junit");
+    }
+
+        /**
+         * Creates a dependency provider for material (com.google.android.material:material)
+         * This dependency was declared in catalog libs.versions.toml
+     * @deprecated Will be removed in Gradle 9.0.
+         */
+    @Deprecated
+        public Provider<MinimalExternalModuleDependency> getMaterial() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return create("material");
+    }
+
+    /**
+     * Returns the group of libraries at androidx
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public AndroidxLibraryAccessors getAndroidx() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForAndroidxLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at firebase
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public FirebaseLibraryAccessors getFirebase() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForFirebaseLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at google
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public GoogleLibraryAccessors getGoogle() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForGoogleLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at play
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public PlayLibraryAccessors getPlay() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForPlayLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of versions at versions
+     */
+    public VersionAccessors getVersions() {
+        return vaccForVersionAccessors;
+    }
+
+    /**
+     * Returns the group of bundles at bundles
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public BundleAccessors getBundles() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return baccForBundleAccessors;
+    }
+
+    /**
+     * Returns the group of plugins at plugins
+     */
+    public PluginAccessors getPlugins() {
+        return paccForPluginAccessors;
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxLibraryAccessors extends SubDependencyFactory {
+        private final AndroidxCoreLibraryAccessors laccForAndroidxCoreLibraryAccessors = new AndroidxCoreLibraryAccessors(owner);
+        private final AndroidxEspressoLibraryAccessors laccForAndroidxEspressoLibraryAccessors = new AndroidxEspressoLibraryAccessors(owner);
+        private final AndroidxRoomLibraryAccessors laccForAndroidxRoomLibraryAccessors = new AndroidxRoomLibraryAccessors(owner);
+
+        public AndroidxLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for activity (androidx.activity:activity)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getActivity() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.activity");
+        }
+
+            /**
+             * Creates a dependency provider for appcompat (androidx.appcompat:appcompat)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getAppcompat() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.appcompat");
+        }
+
+            /**
+             * Creates a dependency provider for constraintlayout (androidx.constraintlayout:constraintlayout)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.constraintlayout");
+        }
+
+            /**
+             * Creates a dependency provider for junit (androidx.test.ext:junit)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getJunit() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.junit");
+        }
+
+        /**
+         * Returns the group of libraries at androidx.core
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxCoreLibraryAccessors getCore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxCoreLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.espresso
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxEspressoLibraryAccessors getEspresso() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxEspressoLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.room
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxRoomLibraryAccessors getRoom() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxRoomLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxCoreLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxCoreLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.core:core-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.core.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxEspressoLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxEspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for core (androidx.test.espresso:espresso-core)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.espresso.core");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxRoomLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxRoomLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for common (androidx.room:room-common)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCommon() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.common");
+        }
+
+            /**
+             * Creates a dependency provider for compiler (androidx.room:room-compiler)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCompiler() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.compiler");
+        }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.room:room-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class FirebaseLibraryAccessors extends SubDependencyFactory {
+        private final FirebaseStorageLibraryAccessors laccForFirebaseStorageLibraryAccessors = new FirebaseStorageLibraryAccessors(owner);
+
+        public FirebaseLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for auth (com.google.firebase:firebase-auth)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getAuth() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.auth");
+        }
+
+            /**
+             * Creates a dependency provider for database (com.google.firebase:firebase-database)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getDatabase() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.database");
+        }
+
+            /**
+             * Creates a dependency provider for firestore (com.google.firebase:firebase-firestore)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getFirestore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.firestore");
+        }
+
+        /**
+         * Returns the group of libraries at firebase.storage
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public FirebaseStorageLibraryAccessors getStorage() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForFirebaseStorageLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class FirebaseStorageLibraryAccessors extends SubDependencyFactory {
+
+        public FirebaseStorageLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (com.google.firebase:firebase-storage-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.storage.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class GoogleLibraryAccessors extends SubDependencyFactory {
+
+        public GoogleLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for services (com.google.gms:google-services)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getServices() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("google.services");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class PlayLibraryAccessors extends SubDependencyFactory {
+        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
+
+        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+        /**
+         * Returns the group of libraries at play.services
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public PlayServicesLibraryAccessors getServices() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForPlayServicesLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
+
+        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for maps (com.google.android.gms:play-services-maps)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getMaps() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("play.services.maps");
+        }
+
+    }
+
+    public static class VersionAccessors extends VersionFactory  {
+
+        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Returns the version associated to this alias: activity (1.8.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getActivity() { return getVersion("activity"); }
+
+            /**
+             * Returns the version associated to this alias: agp (8.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAgp() { return getVersion("agp"); }
+
+            /**
+             * Returns the version associated to this alias: appcompat (1.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAppcompat() { return getVersion("appcompat"); }
+
+            /**
+             * Returns the version associated to this alias: constraintlayout (2.1.4)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
+
+            /**
+             * Returns the version associated to this alias: coreKtx (1.10.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getCoreKtx() { return getVersion("coreKtx"); }
+
+            /**
+             * Returns the version associated to this alias: espressoCore (3.5.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseAuth (22.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseAuth() { return getVersion("firebaseAuth"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseDatabase (20.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseDatabase() { return getVersion("firebaseDatabase"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseFirestore (24.10.3)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseFirestore() { return getVersion("firebaseFirestore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseStorageKtx (20.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseStorageKtx() { return getVersion("firebaseStorageKtx"); }
+
+            /**
+             * Returns the version associated to this alias: googleServices (4.4.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getGoogleServices() { return getVersion("googleServices"); }
+
+            /**
+             * Returns the version associated to this alias: junit (4.13.2)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunit() { return getVersion("junit"); }
+
+            /**
+             * Returns the version associated to this alias: junitVersion (1.1.5)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
+
+            /**
+             * Returns the version associated to this alias: kotlin (1.9.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getKotlin() { return getVersion("kotlin"); }
+
+            /**
+             * Returns the version associated to this alias: material (1.10.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getMaterial() { return getVersion("material"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesMaps (18.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesMaps() { return getVersion("playServicesMaps"); }
+
+            /**
+             * Returns the version associated to this alias: roomCommon (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCommon() { return getVersion("roomCommon"); }
+
+            /**
+             * Returns the version associated to this alias: roomCompiler (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCompiler() { return getVersion("roomCompiler"); }
+
+            /**
+             * Returns the version associated to this alias: roomKtx (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomKtx() { return getVersion("roomKtx"); }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class BundleAccessors extends BundleFactory {
+
+        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
+
+    }
+
+    public static class PluginAccessors extends PluginFactory {
+
+        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Creates a plugin provider for androidApplication to the plugin id 'com.android.application'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getAndroidApplication() { return createPlugin("androidApplication"); }
+
+            /**
+             * Creates a plugin provider for jetbrainsKotlinAndroid to the plugin id 'org.jetbrains.kotlin.android'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getJetbrainsKotlinAndroid() { return createPlugin("jetbrainsKotlinAndroid"); }
+
+    }
+
+}
Index: .gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java b/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
new file mode 100644
--- /dev/null	(date 1713960589422)
+++ b/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java	(date 1713960589422)
@@ -0,0 +1,634 @@
+package org.gradle.accessors.dm;
+
+import org.gradle.api.NonNullApi;
+import org.gradle.api.artifacts.MinimalExternalModuleDependency;
+import org.gradle.plugin.use.PluginDependency;
+import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
+import org.gradle.api.artifacts.MutableVersionConstraint;
+import org.gradle.api.provider.Provider;
+import org.gradle.api.model.ObjectFactory;
+import org.gradle.api.provider.ProviderFactory;
+import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
+import org.gradle.api.internal.catalog.DefaultVersionCatalog;
+import java.util.Map;
+import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
+import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
+import javax.inject.Inject;
+
+/**
+ * A catalog of dependencies accessible via the `libs` extension.
+ */
+@NonNullApi
+public class LibrariesForLibsInPluginsBlock extends AbstractExternalDependencyFactory {
+
+    private final AbstractExternalDependencyFactory owner = this;
+    private final AndroidxLibraryAccessors laccForAndroidxLibraryAccessors = new AndroidxLibraryAccessors(owner);
+    private final FirebaseLibraryAccessors laccForFirebaseLibraryAccessors = new FirebaseLibraryAccessors(owner);
+    private final GoogleLibraryAccessors laccForGoogleLibraryAccessors = new GoogleLibraryAccessors(owner);
+    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
+    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
+    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
+    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
+
+    @Inject
+    public LibrariesForLibsInPluginsBlock(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
+        super(config, providers, objects, attributesFactory, capabilityNotationParser);
+    }
+
+        /**
+         * Creates a dependency provider for junit (junit:junit)
+         * This dependency was declared in catalog libs.versions.toml
+     * @deprecated Will be removed in Gradle 9.0.
+         */
+    @Deprecated
+        public Provider<MinimalExternalModuleDependency> getJunit() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return create("junit");
+    }
+
+        /**
+         * Creates a dependency provider for material (com.google.android.material:material)
+         * This dependency was declared in catalog libs.versions.toml
+     * @deprecated Will be removed in Gradle 9.0.
+         */
+    @Deprecated
+        public Provider<MinimalExternalModuleDependency> getMaterial() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return create("material");
+    }
+
+    /**
+     * Returns the group of libraries at androidx
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public AndroidxLibraryAccessors getAndroidx() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForAndroidxLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at firebase
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public FirebaseLibraryAccessors getFirebase() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForFirebaseLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at google
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public GoogleLibraryAccessors getGoogle() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForGoogleLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at play
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public PlayLibraryAccessors getPlay() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForPlayLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of versions at versions
+     */
+    public VersionAccessors getVersions() {
+        return vaccForVersionAccessors;
+    }
+
+    /**
+     * Returns the group of bundles at bundles
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public BundleAccessors getBundles() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return baccForBundleAccessors;
+    }
+
+    /**
+     * Returns the group of plugins at plugins
+     */
+    public PluginAccessors getPlugins() {
+        return paccForPluginAccessors;
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxLibraryAccessors extends SubDependencyFactory {
+        private final AndroidxCoreLibraryAccessors laccForAndroidxCoreLibraryAccessors = new AndroidxCoreLibraryAccessors(owner);
+        private final AndroidxEspressoLibraryAccessors laccForAndroidxEspressoLibraryAccessors = new AndroidxEspressoLibraryAccessors(owner);
+        private final AndroidxRoomLibraryAccessors laccForAndroidxRoomLibraryAccessors = new AndroidxRoomLibraryAccessors(owner);
+
+        public AndroidxLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for activity (androidx.activity:activity)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getActivity() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.activity");
+        }
+
+            /**
+             * Creates a dependency provider for appcompat (androidx.appcompat:appcompat)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getAppcompat() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.appcompat");
+        }
+
+            /**
+             * Creates a dependency provider for constraintlayout (androidx.constraintlayout:constraintlayout)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.constraintlayout");
+        }
+
+            /**
+             * Creates a dependency provider for junit (androidx.test.ext:junit)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getJunit() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.junit");
+        }
+
+        /**
+         * Returns the group of libraries at androidx.core
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxCoreLibraryAccessors getCore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxCoreLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.espresso
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxEspressoLibraryAccessors getEspresso() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxEspressoLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.room
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxRoomLibraryAccessors getRoom() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxRoomLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxCoreLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxCoreLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.core:core-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.core.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxEspressoLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxEspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for core (androidx.test.espresso:espresso-core)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.espresso.core");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxRoomLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxRoomLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for common (androidx.room:room-common)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCommon() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.common");
+        }
+
+            /**
+             * Creates a dependency provider for compiler (androidx.room:room-compiler)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCompiler() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.compiler");
+        }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.room:room-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class FirebaseLibraryAccessors extends SubDependencyFactory {
+        private final FirebaseStorageLibraryAccessors laccForFirebaseStorageLibraryAccessors = new FirebaseStorageLibraryAccessors(owner);
+
+        public FirebaseLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for auth (com.google.firebase:firebase-auth)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getAuth() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.auth");
+        }
+
+            /**
+             * Creates a dependency provider for database (com.google.firebase:firebase-database)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getDatabase() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.database");
+        }
+
+            /**
+             * Creates a dependency provider for firestore (com.google.firebase:firebase-firestore)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getFirestore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.firestore");
+        }
+
+        /**
+         * Returns the group of libraries at firebase.storage
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public FirebaseStorageLibraryAccessors getStorage() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForFirebaseStorageLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class FirebaseStorageLibraryAccessors extends SubDependencyFactory {
+
+        public FirebaseStorageLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (com.google.firebase:firebase-storage-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.storage.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class GoogleLibraryAccessors extends SubDependencyFactory {
+
+        public GoogleLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for services (com.google.gms:google-services)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getServices() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("google.services");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class PlayLibraryAccessors extends SubDependencyFactory {
+        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
+
+        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+        /**
+         * Returns the group of libraries at play.services
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public PlayServicesLibraryAccessors getServices() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForPlayServicesLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
+
+        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for maps (com.google.android.gms:play-services-maps)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getMaps() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("play.services.maps");
+        }
+
+    }
+
+    public static class VersionAccessors extends VersionFactory  {
+
+        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Returns the version associated to this alias: activity (1.8.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getActivity() { return getVersion("activity"); }
+
+            /**
+             * Returns the version associated to this alias: agp (8.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAgp() { return getVersion("agp"); }
+
+            /**
+             * Returns the version associated to this alias: appcompat (1.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAppcompat() { return getVersion("appcompat"); }
+
+            /**
+             * Returns the version associated to this alias: constraintlayout (2.1.4)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
+
+            /**
+             * Returns the version associated to this alias: coreKtx (1.10.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getCoreKtx() { return getVersion("coreKtx"); }
+
+            /**
+             * Returns the version associated to this alias: espressoCore (3.5.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseAuth (22.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseAuth() { return getVersion("firebaseAuth"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseDatabase (20.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseDatabase() { return getVersion("firebaseDatabase"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseFirestore (24.10.3)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseFirestore() { return getVersion("firebaseFirestore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseStorageKtx (20.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseStorageKtx() { return getVersion("firebaseStorageKtx"); }
+
+            /**
+             * Returns the version associated to this alias: googleAndroidLibrariesMapsplatformSecretsGradlePlugin (2.0.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getGoogleAndroidLibrariesMapsplatformSecretsGradlePlugin() { return getVersion("googleAndroidLibrariesMapsplatformSecretsGradlePlugin"); }
+
+            /**
+             * Returns the version associated to this alias: googleServices (4.4.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getGoogleServices() { return getVersion("googleServices"); }
+
+            /**
+             * Returns the version associated to this alias: junit (4.13.2)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunit() { return getVersion("junit"); }
+
+            /**
+             * Returns the version associated to this alias: junitVersion (1.1.5)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
+
+            /**
+             * Returns the version associated to this alias: kotlin (1.9.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getKotlin() { return getVersion("kotlin"); }
+
+            /**
+             * Returns the version associated to this alias: material (1.10.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getMaterial() { return getVersion("material"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesMaps (18.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesMaps() { return getVersion("playServicesMaps"); }
+
+            /**
+             * Returns the version associated to this alias: roomCommon (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCommon() { return getVersion("roomCommon"); }
+
+            /**
+             * Returns the version associated to this alias: roomCompiler (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCompiler() { return getVersion("roomCompiler"); }
+
+            /**
+             * Returns the version associated to this alias: roomKtx (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomKtx() { return getVersion("roomKtx"); }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class BundleAccessors extends BundleFactory {
+
+        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
+
+    }
+
+    public static class PluginAccessors extends PluginFactory {
+
+        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Creates a plugin provider for androidApplication to the plugin id 'com.android.application'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getAndroidApplication() { return createPlugin("androidApplication"); }
+
+            /**
+             * Creates a plugin provider for googleAndroidLibrariesMapsplatformSecretsGradlePlugin to the plugin id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getGoogleAndroidLibrariesMapsplatformSecretsGradlePlugin() { return createPlugin("googleAndroidLibrariesMapsplatformSecretsGradlePlugin"); }
+
+            /**
+             * Creates a plugin provider for jetbrainsKotlinAndroid to the plugin id 'org.jetbrains.kotlin.android'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getJetbrainsKotlinAndroid() { return createPlugin("jetbrainsKotlinAndroid"); }
+
+    }
+
+}
Index: .gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java b/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
new file mode 100644
--- /dev/null	(date 1713960589569)
+++ b/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java	(date 1713960589569)
@@ -0,0 +1,639 @@
+package org.gradle.accessors.dm;
+
+import org.gradle.api.NonNullApi;
+import org.gradle.api.artifacts.MinimalExternalModuleDependency;
+import org.gradle.plugin.use.PluginDependency;
+import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
+import org.gradle.api.artifacts.MutableVersionConstraint;
+import org.gradle.api.provider.Provider;
+import org.gradle.api.model.ObjectFactory;
+import org.gradle.api.provider.ProviderFactory;
+import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
+import org.gradle.api.internal.catalog.DefaultVersionCatalog;
+import java.util.Map;
+import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
+import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
+import javax.inject.Inject;
+
+/**
+ * A catalog of dependencies accessible via the `libs` extension.
+ */
+@NonNullApi
+public class LibrariesForLibsInPluginsBlock extends AbstractExternalDependencyFactory {
+
+    private final AbstractExternalDependencyFactory owner = this;
+    private final AndroidxLibraryAccessors laccForAndroidxLibraryAccessors = new AndroidxLibraryAccessors(owner);
+    private final FirebaseLibraryAccessors laccForFirebaseLibraryAccessors = new FirebaseLibraryAccessors(owner);
+    private final GoogleLibraryAccessors laccForGoogleLibraryAccessors = new GoogleLibraryAccessors(owner);
+    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
+    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
+    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
+    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
+
+    @Inject
+    public LibrariesForLibsInPluginsBlock(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
+        super(config, providers, objects, attributesFactory, capabilityNotationParser);
+    }
+
+        /**
+         * Creates a dependency provider for junit (junit:junit)
+         * This dependency was declared in catalog libs.versions.toml
+     * @deprecated Will be removed in Gradle 9.0.
+         */
+    @Deprecated
+        public Provider<MinimalExternalModuleDependency> getJunit() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return create("junit");
+    }
+
+        /**
+         * Creates a dependency provider for material (com.google.android.material:material)
+         * This dependency was declared in catalog libs.versions.toml
+     * @deprecated Will be removed in Gradle 9.0.
+         */
+    @Deprecated
+        public Provider<MinimalExternalModuleDependency> getMaterial() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return create("material");
+    }
+
+    /**
+     * Returns the group of libraries at androidx
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public AndroidxLibraryAccessors getAndroidx() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForAndroidxLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at firebase
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public FirebaseLibraryAccessors getFirebase() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForFirebaseLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at google
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public GoogleLibraryAccessors getGoogle() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForGoogleLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at play
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public PlayLibraryAccessors getPlay() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForPlayLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of versions at versions
+     */
+    public VersionAccessors getVersions() {
+        return vaccForVersionAccessors;
+    }
+
+    /**
+     * Returns the group of bundles at bundles
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public BundleAccessors getBundles() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return baccForBundleAccessors;
+    }
+
+    /**
+     * Returns the group of plugins at plugins
+     */
+    public PluginAccessors getPlugins() {
+        return paccForPluginAccessors;
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxLibraryAccessors extends SubDependencyFactory {
+        private final AndroidxCoreLibraryAccessors laccForAndroidxCoreLibraryAccessors = new AndroidxCoreLibraryAccessors(owner);
+        private final AndroidxEspressoLibraryAccessors laccForAndroidxEspressoLibraryAccessors = new AndroidxEspressoLibraryAccessors(owner);
+        private final AndroidxRoomLibraryAccessors laccForAndroidxRoomLibraryAccessors = new AndroidxRoomLibraryAccessors(owner);
+
+        public AndroidxLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for activity (androidx.activity:activity)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getActivity() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.activity");
+        }
+
+            /**
+             * Creates a dependency provider for appcompat (androidx.appcompat:appcompat)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getAppcompat() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.appcompat");
+        }
+
+            /**
+             * Creates a dependency provider for constraintlayout (androidx.constraintlayout:constraintlayout)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.constraintlayout");
+        }
+
+            /**
+             * Creates a dependency provider for junit (androidx.test.ext:junit)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getJunit() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.junit");
+        }
+
+        /**
+         * Returns the group of libraries at androidx.core
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxCoreLibraryAccessors getCore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxCoreLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.espresso
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxEspressoLibraryAccessors getEspresso() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxEspressoLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.room
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxRoomLibraryAccessors getRoom() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxRoomLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxCoreLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxCoreLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.core:core-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.core.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxEspressoLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxEspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for core (androidx.test.espresso:espresso-core)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.espresso.core");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxRoomLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxRoomLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for common (androidx.room:room-common)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCommon() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.common");
+        }
+
+            /**
+             * Creates a dependency provider for compiler (androidx.room:room-compiler)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCompiler() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.compiler");
+        }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.room:room-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class FirebaseLibraryAccessors extends SubDependencyFactory {
+        private final FirebaseStorageLibraryAccessors laccForFirebaseStorageLibraryAccessors = new FirebaseStorageLibraryAccessors(owner);
+
+        public FirebaseLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for auth (com.google.firebase:firebase-auth)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getAuth() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.auth");
+        }
+
+            /**
+             * Creates a dependency provider for database (com.google.firebase:firebase-database)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getDatabase() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.database");
+        }
+
+            /**
+             * Creates a dependency provider for firestore (com.google.firebase:firebase-firestore)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getFirestore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.firestore");
+        }
+
+        /**
+         * Returns the group of libraries at firebase.storage
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public FirebaseStorageLibraryAccessors getStorage() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForFirebaseStorageLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class FirebaseStorageLibraryAccessors extends SubDependencyFactory {
+
+        public FirebaseStorageLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (com.google.firebase:firebase-storage-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.storage.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class GoogleLibraryAccessors extends SubDependencyFactory {
+
+        public GoogleLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for services (com.google.gms:google-services)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getServices() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("google.services");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class PlayLibraryAccessors extends SubDependencyFactory {
+        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
+
+        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+        /**
+         * Returns the group of libraries at play.services
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public PlayServicesLibraryAccessors getServices() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForPlayServicesLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
+
+        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for location (com.google.android.gms:play-services-location)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getLocation() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("play.services.location");
+        }
+
+            /**
+             * Creates a dependency provider for maps (com.google.android.gms:play-services-maps)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getMaps() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("play.services.maps");
+        }
+
+    }
+
+    public static class VersionAccessors extends VersionFactory  {
+
+        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Returns the version associated to this alias: activity (1.8.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getActivity() { return getVersion("activity"); }
+
+            /**
+             * Returns the version associated to this alias: agp (8.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAgp() { return getVersion("agp"); }
+
+            /**
+             * Returns the version associated to this alias: appcompat (1.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAppcompat() { return getVersion("appcompat"); }
+
+            /**
+             * Returns the version associated to this alias: constraintlayout (2.1.4)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
+
+            /**
+             * Returns the version associated to this alias: coreKtx (1.10.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getCoreKtx() { return getVersion("coreKtx"); }
+
+            /**
+             * Returns the version associated to this alias: espressoCore (3.5.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseAuth (22.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseAuth() { return getVersion("firebaseAuth"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseDatabase (20.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseDatabase() { return getVersion("firebaseDatabase"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseFirestore (24.10.3)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseFirestore() { return getVersion("firebaseFirestore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseStorageKtx (20.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseStorageKtx() { return getVersion("firebaseStorageKtx"); }
+
+            /**
+             * Returns the version associated to this alias: googleServices (4.4.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getGoogleServices() { return getVersion("googleServices"); }
+
+            /**
+             * Returns the version associated to this alias: junit (4.13.2)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunit() { return getVersion("junit"); }
+
+            /**
+             * Returns the version associated to this alias: junitVersion (1.1.5)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
+
+            /**
+             * Returns the version associated to this alias: kotlin (1.9.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getKotlin() { return getVersion("kotlin"); }
+
+            /**
+             * Returns the version associated to this alias: material (1.10.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getMaterial() { return getVersion("material"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesLocation (21.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesLocation() { return getVersion("playServicesLocation"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesMaps (18.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesMaps() { return getVersion("playServicesMaps"); }
+
+            /**
+             * Returns the version associated to this alias: roomCommon (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCommon() { return getVersion("roomCommon"); }
+
+            /**
+             * Returns the version associated to this alias: roomCompiler (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCompiler() { return getVersion("roomCompiler"); }
+
+            /**
+             * Returns the version associated to this alias: roomKtx (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomKtx() { return getVersion("roomKtx"); }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class BundleAccessors extends BundleFactory {
+
+        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
+
+    }
+
+    public static class PluginAccessors extends PluginFactory {
+
+        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Creates a plugin provider for androidApplication to the plugin id 'com.android.application'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getAndroidApplication() { return createPlugin("androidApplication"); }
+
+            /**
+             * Creates a plugin provider for jetbrainsKotlinAndroid to the plugin id 'org.jetbrains.kotlin.android'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getJetbrainsKotlinAndroid() { return createPlugin("jetbrainsKotlinAndroid"); }
+
+    }
+
+}
Index: .gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java b/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java
new file mode 100644
--- /dev/null	(date 1713960899411)
+++ b/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java	(date 1713960899411)
@@ -0,0 +1,658 @@
+package org.gradle.accessors.dm;
+
+import org.gradle.api.NonNullApi;
+import org.gradle.api.artifacts.MinimalExternalModuleDependency;
+import org.gradle.plugin.use.PluginDependency;
+import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
+import org.gradle.api.artifacts.MutableVersionConstraint;
+import org.gradle.api.provider.Provider;
+import org.gradle.api.model.ObjectFactory;
+import org.gradle.api.provider.ProviderFactory;
+import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
+import org.gradle.api.internal.catalog.DefaultVersionCatalog;
+import java.util.Map;
+import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
+import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
+import javax.inject.Inject;
+
+/**
+ * A catalog of dependencies accessible via the `libs` extension.
+ */
+@NonNullApi
+public class LibrariesForLibsInPluginsBlock extends AbstractExternalDependencyFactory {
+
+    private final AbstractExternalDependencyFactory owner = this;
+    private final AndroidxLibraryAccessors laccForAndroidxLibraryAccessors = new AndroidxLibraryAccessors(owner);
+    private final FirebaseLibraryAccessors laccForFirebaseLibraryAccessors = new FirebaseLibraryAccessors(owner);
+    private final GoogleLibraryAccessors laccForGoogleLibraryAccessors = new GoogleLibraryAccessors(owner);
+    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
+    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
+    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
+    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
+
+    @Inject
+    public LibrariesForLibsInPluginsBlock(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
+        super(config, providers, objects, attributesFactory, capabilityNotationParser);
+    }
+
+        /**
+         * Creates a dependency provider for junit (junit:junit)
+         * This dependency was declared in catalog libs.versions.toml
+     * @deprecated Will be removed in Gradle 9.0.
+         */
+    @Deprecated
+        public Provider<MinimalExternalModuleDependency> getJunit() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return create("junit");
+    }
+
+        /**
+         * Creates a dependency provider for material (com.google.android.material:material)
+         * This dependency was declared in catalog libs.versions.toml
+     * @deprecated Will be removed in Gradle 9.0.
+         */
+    @Deprecated
+        public Provider<MinimalExternalModuleDependency> getMaterial() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return create("material");
+    }
+
+    /**
+     * Returns the group of libraries at androidx
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public AndroidxLibraryAccessors getAndroidx() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForAndroidxLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at firebase
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public FirebaseLibraryAccessors getFirebase() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForFirebaseLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at google
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public GoogleLibraryAccessors getGoogle() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForGoogleLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at play
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public PlayLibraryAccessors getPlay() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return laccForPlayLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of versions at versions
+     */
+    public VersionAccessors getVersions() {
+        return vaccForVersionAccessors;
+    }
+
+    /**
+     * Returns the group of bundles at bundles
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public BundleAccessors getBundles() {
+        org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+        return baccForBundleAccessors;
+    }
+
+    /**
+     * Returns the group of plugins at plugins
+     */
+    public PluginAccessors getPlugins() {
+        return paccForPluginAccessors;
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxLibraryAccessors extends SubDependencyFactory {
+        private final AndroidxCoreLibraryAccessors laccForAndroidxCoreLibraryAccessors = new AndroidxCoreLibraryAccessors(owner);
+        private final AndroidxEspressoLibraryAccessors laccForAndroidxEspressoLibraryAccessors = new AndroidxEspressoLibraryAccessors(owner);
+        private final AndroidxRoomLibraryAccessors laccForAndroidxRoomLibraryAccessors = new AndroidxRoomLibraryAccessors(owner);
+
+        public AndroidxLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for activity (androidx.activity:activity)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getActivity() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.activity");
+        }
+
+            /**
+             * Creates a dependency provider for appcompat (androidx.appcompat:appcompat)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getAppcompat() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.appcompat");
+        }
+
+            /**
+             * Creates a dependency provider for compilerCommon (androidx.databinding:compilerCommon)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCompilerCommon() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.compilerCommon");
+        }
+
+            /**
+             * Creates a dependency provider for constraintlayout (androidx.constraintlayout:constraintlayout)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.constraintlayout");
+        }
+
+            /**
+             * Creates a dependency provider for junit (androidx.test.ext:junit)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getJunit() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.junit");
+        }
+
+        /**
+         * Returns the group of libraries at androidx.core
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxCoreLibraryAccessors getCore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxCoreLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.espresso
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxEspressoLibraryAccessors getEspresso() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxEspressoLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.room
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public AndroidxRoomLibraryAccessors getRoom() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForAndroidxRoomLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxCoreLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxCoreLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.core:core-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.core.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxEspressoLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxEspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for core (androidx.test.espresso:espresso-core)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.espresso.core");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class AndroidxRoomLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxRoomLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for common (androidx.room:room-common)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCommon() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.common");
+        }
+
+            /**
+             * Creates a dependency provider for compiler (androidx.room:room-compiler)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getCompiler() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.compiler");
+        }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.room:room-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("androidx.room.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class FirebaseLibraryAccessors extends SubDependencyFactory {
+        private final FirebaseStorageLibraryAccessors laccForFirebaseStorageLibraryAccessors = new FirebaseStorageLibraryAccessors(owner);
+
+        public FirebaseLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for auth (com.google.firebase:firebase-auth)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getAuth() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.auth");
+        }
+
+            /**
+             * Creates a dependency provider for database (com.google.firebase:firebase-database)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getDatabase() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.database");
+        }
+
+            /**
+             * Creates a dependency provider for firestore (com.google.firebase:firebase-firestore)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getFirestore() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.firestore");
+        }
+
+        /**
+         * Returns the group of libraries at firebase.storage
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public FirebaseStorageLibraryAccessors getStorage() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForFirebaseStorageLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class FirebaseStorageLibraryAccessors extends SubDependencyFactory {
+
+        public FirebaseStorageLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (com.google.firebase:firebase-storage-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("firebase.storage.ktx");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class GoogleLibraryAccessors extends SubDependencyFactory {
+
+        public GoogleLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for services (com.google.gms:google-services)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getServices() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("google.services");
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class PlayLibraryAccessors extends SubDependencyFactory {
+        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
+
+        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+        /**
+         * Returns the group of libraries at play.services
+         * @deprecated Will be removed in Gradle 9.0.
+         */
+        @Deprecated
+        public PlayServicesLibraryAccessors getServices() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+            return laccForPlayServicesLibraryAccessors;
+        }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
+
+        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for location (com.google.android.gms:play-services-location)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getLocation() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("play.services.location");
+        }
+
+            /**
+             * Creates a dependency provider for maps (com.google.android.gms:play-services-maps)
+             * This dependency was declared in catalog libs.versions.toml
+         * @deprecated Will be removed in Gradle 9.0.
+             */
+        @Deprecated
+            public Provider<MinimalExternalModuleDependency> getMaps() {
+            org.gradle.internal.deprecation.DeprecationLogger.deprecateBehaviour("Accessing libraries or bundles from version catalogs in the plugins block.").withAdvice("Only use versions or plugins from catalogs in the plugins block.").willBeRemovedInGradle9().withUpgradeGuideSection(8, "kotlin_dsl_deprecated_catalogs_plugins_block").nagUser();
+                return create("play.services.maps");
+        }
+
+    }
+
+    public static class VersionAccessors extends VersionFactory  {
+
+        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Returns the version associated to this alias: activity (1.8.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getActivity() { return getVersion("activity"); }
+
+            /**
+             * Returns the version associated to this alias: agp (8.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAgp() { return getVersion("agp"); }
+
+            /**
+             * Returns the version associated to this alias: appcompat (1.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAppcompat() { return getVersion("appcompat"); }
+
+            /**
+             * Returns the version associated to this alias: compilercommon (3.2.0-alpha11)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getCompilercommon() { return getVersion("compilercommon"); }
+
+            /**
+             * Returns the version associated to this alias: constraintlayout (2.1.4)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
+
+            /**
+             * Returns the version associated to this alias: coreKtx (1.10.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getCoreKtx() { return getVersion("coreKtx"); }
+
+            /**
+             * Returns the version associated to this alias: espressoCore (3.5.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseAuth (22.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseAuth() { return getVersion("firebaseAuth"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseDatabase (20.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseDatabase() { return getVersion("firebaseDatabase"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseFirestore (24.10.3)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseFirestore() { return getVersion("firebaseFirestore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseStorageKtx (20.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseStorageKtx() { return getVersion("firebaseStorageKtx"); }
+
+            /**
+             * Returns the version associated to this alias: googleServices (4.4.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getGoogleServices() { return getVersion("googleServices"); }
+
+            /**
+             * Returns the version associated to this alias: junit (4.13.2)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunit() { return getVersion("junit"); }
+
+            /**
+             * Returns the version associated to this alias: junitVersion (1.1.5)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
+
+            /**
+             * Returns the version associated to this alias: kotlin (1.9.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getKotlin() { return getVersion("kotlin"); }
+
+            /**
+             * Returns the version associated to this alias: material (1.10.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getMaterial() { return getVersion("material"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesLocation (21.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesLocation() { return getVersion("playServicesLocation"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesMaps (18.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesMaps() { return getVersion("playServicesMaps"); }
+
+            /**
+             * Returns the version associated to this alias: roomCommon (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCommon() { return getVersion("roomCommon"); }
+
+            /**
+             * Returns the version associated to this alias: roomCompiler (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCompiler() { return getVersion("roomCompiler"); }
+
+            /**
+             * Returns the version associated to this alias: roomKtx (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomKtx() { return getVersion("roomKtx"); }
+
+    }
+
+    /**
+     * @deprecated Will be removed in Gradle 9.0.
+     */
+    @Deprecated
+    public static class BundleAccessors extends BundleFactory {
+
+        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
+
+    }
+
+    public static class PluginAccessors extends PluginFactory {
+
+        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Creates a plugin provider for androidApplication to the plugin id 'com.android.application'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getAndroidApplication() { return createPlugin("androidApplication"); }
+
+            /**
+             * Creates a plugin provider for jetbrainsKotlinAndroid to the plugin id 'org.jetbrains.kotlin.android'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getJetbrainsKotlinAndroid() { return createPlugin("jetbrainsKotlinAndroid"); }
+
+    }
+
+}
Index: .gradle/config.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Sun Apr 14 17:35:36 IDT 2024\r\njava.home=C\\:\\\\Program Files\\\\Android\\\\Android Studio\\\\jbr\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/.gradle/config.properties b/.gradle/config.properties
--- a/.gradle/config.properties	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
+++ b/.gradle/config.properties	(date 1713960865623)
@@ -1,2 +1,2 @@
-#Sun Apr 14 17:35:36 IDT 2024
+#Wed Apr 24 15:14:25 IDT 2024
 java.home=C\:\\Program Files\\Android\\Android Studio\\jbr
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AndroidLayouts\">\r\n    <shared>\r\n      <config />\r\n    </shared>\r\n    <layouts>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/activity_login.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/activity_sign_up.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/activity_welcome.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_comment_item.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_comments.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_edit_comment_dialog.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_edit_profile_dialog.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_home_page.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_login.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_navigation_bar.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_post.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_profile.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_recipe.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_sign_up.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/item_comment.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/menu/bottom_navigation_menu.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Foodtruck</theme>\r\n        </config>\r\n      </layout>\r\n    </layouts>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2c63e04c-e8fc-49d9-a8f5-a55a60abe3dd\" name=\"Changes\" comment=\"make profile user\">\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/8.4/executionHistory/executionHistory.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/8.4/executionHistory/executionHistory.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/8.4/executionHistory/executionHistory.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/8.4/executionHistory/executionHistory.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/8.4/fileHashes/fileHashes.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/8.4/fileHashes/fileHashes.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/8.4/fileHashes/fileHashes.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/8.4/fileHashes/fileHashes.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/res/layout/fragment_profile.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/res/layout/fragment_profile.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ClangdSettings\">\r\n    <option name=\"formatViaClangd\" value=\"false\" />\r\n  </component>\r\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"device_and_snapshot_combo_box_target[C:\\Users\\DELL\\.android\\avd\\Medium_Phone_API_34.avd]\" />\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$/app\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand />\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"newDorin2\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\"><![CDATA[{\r\n  \"lastFilter\": {\r\n    \"state\": \"OPEN\",\r\n    \"assignee\": \"Dorins12\"\r\n  }\r\n}]]></component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"b0af7c97-b242-4596-af75-2c76321a41f5\" />\r\n        <option name=\"url\" value=\"https://github.com/ilaycohen2712/Chef-sChoice.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2f6A5PKI79wElby7PpaqdgpaAnC\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.cidr.known.project.marker\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"cf.first.check.clang-format\": \"false\",\r\n    \"cidr.known.project.marker\": \"true\",\r\n    \"git-widget-placeholder\": \"newDori2\",\r\n    \"last_opened_file_path\": \"C:/Users/nirmi/Desktop/Bali/BALI\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\DELL\\AndroidStudioProjects\\Chef-sChoice\\app\\src\\main\\res\\drawable\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\DELL\\AndroidStudioProjects\\Chef-sChoice\\app\\src\\main\\res\\drawable\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Android App.app\">\r\n    <configuration name=\"Welcome\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\" temporary=\"true\">\r\n      <module name=\"foodtruck.app.main\" />\r\n      <option name=\"DEPLOY\" value=\"true\" />\r\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\r\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\r\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\r\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\r\n      <option name=\"ALL_USERS\" value=\"false\" />\r\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\r\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\r\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\r\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\r\n      <option name=\"MODE\" value=\"specific_activity\" />\r\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\r\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\r\n      <option name=\"INSPECTION_WITHOUT_ACTIVITY_RESTART\" value=\"false\" />\r\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\r\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\r\n      <Auto>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Auto>\r\n      <Hybrid>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Hybrid>\r\n      <Java>\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Java>\r\n      <Native>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Native>\r\n      <Profilers>\r\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\r\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\r\n      </Profilers>\r\n      <option name=\"DEEP_LINK\" value=\"\" />\r\n      <option name=\"ACTIVITY_CLASS\" value=\"com.example.foodtruck.Welcome\" />\r\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\r\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\r\n      <method v=\"2\">\r\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"app\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\">\r\n      <module name=\"foodtruck.app.main\" />\r\n      <option name=\"DEPLOY\" value=\"true\" />\r\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\r\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\r\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\r\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\r\n      <option name=\"ALL_USERS\" value=\"false\" />\r\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\r\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\r\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\r\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\r\n      <option name=\"MODE\" value=\"default_activity\" />\r\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\r\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\r\n      <option name=\"INSPECTION_WITHOUT_ACTIVITY_RESTART\" value=\"false\" />\r\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\r\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\r\n      <Auto>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Auto>\r\n      <Hybrid>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Hybrid>\r\n      <Java>\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Java>\r\n      <Native>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Native>\r\n      <Profilers>\r\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\r\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\r\n      </Profilers>\r\n      <option name=\"DEEP_LINK\" value=\"\" />\r\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\r\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\r\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\r\n      <method v=\"2\">\r\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Android App.Welcome\" />\r\n        <item itemvalue=\"Android App.Welcome\" />\r\n        <item itemvalue=\"Android App.Welcome\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2c63e04c-e8fc-49d9-a8f5-a55a60abe3dd\" name=\"Changes\" comment=\"\" />\r\n      <created>1713110969935</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1713110969935</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00001\" summary=\"fix login desgine\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713113650267</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1713113650267</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00002\" summary=\"fic profile\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713702764837</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1713702764837</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00003\" summary=\"fic profile\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713703036721</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1713703036721</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00004\" summary=\"change rules in firebase data\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713712541605</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1713712541605</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00005\" summary=\"make profile user\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713943145491</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1713943145491</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00006\" summary=\"make profile user\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713943233059</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1713943233059</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"7\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"fix login desgine\" />\r\n    <MESSAGE value=\"fic profile\" />\r\n    <MESSAGE value=\"change rules in firebase data\" />\r\n    <MESSAGE value=\"make profile user\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"make profile user\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
+++ b/.idea/workspace.xml	(date 1713961282082)
@@ -102,13 +102,150 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="2c63e04c-e8fc-49d9-a8f5-a55a60abe3dd" name="Changes" comment="make profile user">
-      <change beforePath="$PROJECT_DIR$/.gradle/8.4/executionHistory/executionHistory.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.4/executionHistory/executionHistory.bin" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/8.4/executionHistory/executionHistory.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.4/executionHistory/executionHistory.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/8.4/fileHashes/fileHashes.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.4/fileHashes/fileHashes.bin" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/8.4/fileHashes/fileHashes.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.4/fileHashes/fileHashes.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/checksums/md5-checksums.bin" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/checksums/sha1-checksums.bin" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxCoreLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxEspressoLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxRoomLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$BundleAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$FirebaseLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$FirebaseStorageLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$GoogleLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$PlayLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$PlayServicesLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$PluginAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs$VersionAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibs.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxCoreLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxEspressoLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxRoomLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$BundleAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$FirebaseLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$FirebaseStorageLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$GoogleLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PlayLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PlayServicesLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PluginAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$VersionAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/sources/org/gradle/accessors/dm/LibrariesForLibs.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/118545b3d234b64124256aedd60672f6ae1877fd/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxCoreLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxEspressoLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxRoomLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$BundleAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$FirebaseLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$FirebaseStorageLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$GoogleLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$PlayLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$PlayServicesLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$PluginAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs$VersionAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibs.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxCoreLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxEspressoLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxRoomLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$BundleAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$FirebaseLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$FirebaseStorageLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$GoogleLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PlayLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PlayServicesLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PluginAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$VersionAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/sources/org/gradle/accessors/dm/LibrariesForLibs.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxCoreLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxEspressoLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxRoomLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$BundleAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$FirebaseLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$FirebaseStorageLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$GoogleLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$PlayLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$PlayServicesLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$PluginAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs$VersionAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibs.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxCoreLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxEspressoLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxRoomLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$BundleAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$FirebaseLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$FirebaseStorageLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$GoogleLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PlayLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PlayServicesLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PluginAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$VersionAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/sources/org/gradle/accessors/dm/LibrariesForLibs.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/a895b4f8d30885a8a2cf737ee8aeb17bcef04499/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxCoreLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxEspressoLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$AndroidxRoomLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$BundleAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$FirebaseLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$FirebaseStorageLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$GoogleLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$PlayLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$PlayServicesLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$PluginAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs$VersionAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibs.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxCoreLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxEspressoLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$AndroidxRoomLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$BundleAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$FirebaseLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$FirebaseStorageLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$GoogleLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PlayLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PlayServicesLibraryAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$PluginAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock$VersionAccessors.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/classes/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/sources/org/gradle/accessors/dm/LibrariesForLibs.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/b1a1ba1f2284b8356c9fd2a68472a7cc46c22a9a/sources/org/gradle/accessors/dm/LibrariesForLibsInPluginsBlock.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/buildOutputCleanup.lock" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/checksums.lock" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/dependencies-accessors.lock" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/executionHistory.bin" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/executionHistory.lock" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/executionHistory1.bin" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/file-system.probe" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/fileHashes.bin" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/fileHashes.lock" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/outputFiles.bin" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/resourceHashesCache.bin" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024__16_13__Changes_.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024__16_13__Changes_1.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_04_2024_15_05_[Changes]/shelved.patch" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.4/checksums/checksums.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.4/checksums/checksums.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/executionHistory.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.4/dependencies-accessors/executionHistory.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/config.properties" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/config.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/deploymentTargetDropDown.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/navEditor.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/navEditor.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024_16_05__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024_16_05__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/res/layout/fragment_profile.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/layout/fragment_profile.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/app/build.gradle.kts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/example/foodtruck/MainActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/example/foodtruck/MainActivity.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/example/foodtruck/profile/ProfileFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/example/foodtruck/profile/ProfileFragment.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/example/foodtruck/profile/ProfileViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/example/foodtruck/profile/ProfileViewModel.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/values/strings.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/values/strings.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/gradle/libs.versions.toml" beforeDir="false" afterPath="$PROJECT_DIR$/gradle/libs.versions.toml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -147,12 +284,12 @@
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
-  "lastFilter": {
-    "state": "OPEN",
-    "assignee": "Dorins12"
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;Dorins12&quot;
   }
-}]]></component>
+}</component>
   <component name="GithubPullRequestsUISettings">
     <option name="selectedUrlAndAccountId">
       <UrlAndAccount>
Index: .idea/navEditor.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"navEditor-manualLayoutAlgorithm2\">\r\n    <option name=\"myPositions\">\r\n      <map>\r\n        <entry key=\"nav_graph.xml\">\r\n          <value>\r\n            <LayoutPositions>\r\n              <option name=\"myPositions\">\r\n                <map>\r\n                  <entry key=\"commentsFragment\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"744\" />\r\n                            <option name=\"y\" value=\"368\" />\r\n                          </Point>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"homePageFragment\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"256\" />\r\n                            <option name=\"y\" value=\"12\" />\r\n                          </Point>\r\n                        </option>\r\n                        <option name=\"myPositions\">\r\n                          <map>\r\n                            <entry key=\"action_homePageFragment_to_commentsFragment\">\r\n                              <value>\r\n                                <LayoutPositions />\r\n                              </value>\r\n                            </entry>\r\n                            <entry key=\"action_homePageFragment_to_postFragment\">\r\n                              <value>\r\n                                <LayoutPositions />\r\n                              </value>\r\n                            </entry>\r\n                          </map>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"placeFragment\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"500\" />\r\n                            <option name=\"y\" value=\"148\" />\r\n                          </Point>\r\n                        </option>\r\n                        <option name=\"myPositions\">\r\n                          <map>\r\n                            <entry key=\"action_placeFragment_to_postFragment\">\r\n                              <value>\r\n                                <LayoutPositions />\r\n                              </value>\r\n                            </entry>\r\n                          </map>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"postFragment\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"744\" />\r\n                            <option name=\"y\" value=\"12\" />\r\n                          </Point>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"profileFragment\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"12\" />\r\n                            <option name=\"y\" value=\"12\" />\r\n                          </Point>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </LayoutPositions>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/navEditor.xml b/.idea/navEditor.xml
--- a/.idea/navEditor.xml	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
+++ b/.idea/navEditor.xml	(date 1713960589575)
@@ -46,40 +46,31 @@
                       </LayoutPositions>
                     </value>
                   </entry>
-                  <entry key="placeFragment">
+                  <entry key="postFragment">
                     <value>
                       <LayoutPositions>
                         <option name="myPosition">
                           <Point>
-                            <option name="x" value="500" />
-                            <option name="y" value="148" />
+                            <option name="x" value="744" />
+                            <option name="y" value="12" />
                           </Point>
-                        </option>
-                        <option name="myPositions">
-                          <map>
-                            <entry key="action_placeFragment_to_postFragment">
-                              <value>
-                                <LayoutPositions />
-                              </value>
-                            </entry>
-                          </map>
                         </option>
                       </LayoutPositions>
                     </value>
                   </entry>
-                  <entry key="postFragment">
+                  <entry key="profileFragment">
                     <value>
                       <LayoutPositions>
                         <option name="myPosition">
                           <Point>
-                            <option name="x" value="744" />
+                            <option name="x" value="12" />
                             <option name="y" value="12" />
                           </Point>
                         </option>
                       </LayoutPositions>
                     </value>
                   </entry>
-                  <entry key="profileFragment">
+                  <entry key="recipeFragment">
                     <value>
                       <LayoutPositions>
                         <option name="myPosition">
@@ -87,6 +78,15 @@
                             <option name="x" value="12" />
                             <option name="y" value="12" />
                           </Point>
+                        </option>
+                        <option name="myPositions">
+                          <map>
+                            <entry key="action_recipeFragment_to_postFragment">
+                              <value>
+                                <LayoutPositions />
+                              </value>
+                            </entry>
+                          </map>
                         </option>
                       </LayoutPositions>
                     </value>
Index: .gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/sources/org/gradle/accessors/dm/LibrariesForLibs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/sources/org/gradle/accessors/dm/LibrariesForLibs.java b/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/sources/org/gradle/accessors/dm/LibrariesForLibs.java
new file mode 100644
--- /dev/null	(date 1713960899405)
+++ b/.gradle/8.4/dependencies-accessors/4dea2af1afe227f2f81d2b8ca7cace27f182148d/sources/org/gradle/accessors/dm/LibrariesForLibs.java	(date 1713960899405)
@@ -0,0 +1,531 @@
+package org.gradle.accessors.dm;
+
+import org.gradle.api.NonNullApi;
+import org.gradle.api.artifacts.MinimalExternalModuleDependency;
+import org.gradle.plugin.use.PluginDependency;
+import org.gradle.api.artifacts.ExternalModuleDependencyBundle;
+import org.gradle.api.artifacts.MutableVersionConstraint;
+import org.gradle.api.provider.Provider;
+import org.gradle.api.model.ObjectFactory;
+import org.gradle.api.provider.ProviderFactory;
+import org.gradle.api.internal.catalog.AbstractExternalDependencyFactory;
+import org.gradle.api.internal.catalog.DefaultVersionCatalog;
+import java.util.Map;
+import org.gradle.api.internal.attributes.ImmutableAttributesFactory;
+import org.gradle.api.internal.artifacts.dsl.CapabilityNotationParser;
+import javax.inject.Inject;
+
+/**
+ * A catalog of dependencies accessible via the `libs` extension.
+ */
+@NonNullApi
+public class LibrariesForLibs extends AbstractExternalDependencyFactory {
+
+    private final AbstractExternalDependencyFactory owner = this;
+    private final AndroidxLibraryAccessors laccForAndroidxLibraryAccessors = new AndroidxLibraryAccessors(owner);
+    private final FirebaseLibraryAccessors laccForFirebaseLibraryAccessors = new FirebaseLibraryAccessors(owner);
+    private final GoogleLibraryAccessors laccForGoogleLibraryAccessors = new GoogleLibraryAccessors(owner);
+    private final PlayLibraryAccessors laccForPlayLibraryAccessors = new PlayLibraryAccessors(owner);
+    private final VersionAccessors vaccForVersionAccessors = new VersionAccessors(providers, config);
+    private final BundleAccessors baccForBundleAccessors = new BundleAccessors(objects, providers, config, attributesFactory, capabilityNotationParser);
+    private final PluginAccessors paccForPluginAccessors = new PluginAccessors(providers, config);
+
+    @Inject
+    public LibrariesForLibs(DefaultVersionCatalog config, ProviderFactory providers, ObjectFactory objects, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) {
+        super(config, providers, objects, attributesFactory, capabilityNotationParser);
+    }
+
+        /**
+         * Creates a dependency provider for junit (junit:junit)
+         * This dependency was declared in catalog libs.versions.toml
+         */
+        public Provider<MinimalExternalModuleDependency> getJunit() {
+            return create("junit");
+    }
+
+        /**
+         * Creates a dependency provider for material (com.google.android.material:material)
+         * This dependency was declared in catalog libs.versions.toml
+         */
+        public Provider<MinimalExternalModuleDependency> getMaterial() {
+            return create("material");
+    }
+
+    /**
+     * Returns the group of libraries at androidx
+     */
+    public AndroidxLibraryAccessors getAndroidx() {
+        return laccForAndroidxLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at firebase
+     */
+    public FirebaseLibraryAccessors getFirebase() {
+        return laccForFirebaseLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at google
+     */
+    public GoogleLibraryAccessors getGoogle() {
+        return laccForGoogleLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of libraries at play
+     */
+    public PlayLibraryAccessors getPlay() {
+        return laccForPlayLibraryAccessors;
+    }
+
+    /**
+     * Returns the group of versions at versions
+     */
+    public VersionAccessors getVersions() {
+        return vaccForVersionAccessors;
+    }
+
+    /**
+     * Returns the group of bundles at bundles
+     */
+    public BundleAccessors getBundles() {
+        return baccForBundleAccessors;
+    }
+
+    /**
+     * Returns the group of plugins at plugins
+     */
+    public PluginAccessors getPlugins() {
+        return paccForPluginAccessors;
+    }
+
+    public static class AndroidxLibraryAccessors extends SubDependencyFactory {
+        private final AndroidxCoreLibraryAccessors laccForAndroidxCoreLibraryAccessors = new AndroidxCoreLibraryAccessors(owner);
+        private final AndroidxEspressoLibraryAccessors laccForAndroidxEspressoLibraryAccessors = new AndroidxEspressoLibraryAccessors(owner);
+        private final AndroidxRoomLibraryAccessors laccForAndroidxRoomLibraryAccessors = new AndroidxRoomLibraryAccessors(owner);
+
+        public AndroidxLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for activity (androidx.activity:activity)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getActivity() {
+                return create("androidx.activity");
+        }
+
+            /**
+             * Creates a dependency provider for appcompat (androidx.appcompat:appcompat)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getAppcompat() {
+                return create("androidx.appcompat");
+        }
+
+            /**
+             * Creates a dependency provider for compilerCommon (androidx.databinding:compilerCommon)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCompilerCommon() {
+                return create("androidx.compilerCommon");
+        }
+
+            /**
+             * Creates a dependency provider for constraintlayout (androidx.constraintlayout:constraintlayout)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getConstraintlayout() {
+                return create("androidx.constraintlayout");
+        }
+
+            /**
+             * Creates a dependency provider for junit (androidx.test.ext:junit)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getJunit() {
+                return create("androidx.junit");
+        }
+
+        /**
+         * Returns the group of libraries at androidx.core
+         */
+        public AndroidxCoreLibraryAccessors getCore() {
+            return laccForAndroidxCoreLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.espresso
+         */
+        public AndroidxEspressoLibraryAccessors getEspresso() {
+            return laccForAndroidxEspressoLibraryAccessors;
+        }
+
+        /**
+         * Returns the group of libraries at androidx.room
+         */
+        public AndroidxRoomLibraryAccessors getRoom() {
+            return laccForAndroidxRoomLibraryAccessors;
+        }
+
+    }
+
+    public static class AndroidxCoreLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxCoreLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.core:core-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("androidx.core.ktx");
+        }
+
+    }
+
+    public static class AndroidxEspressoLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxEspressoLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for core (androidx.test.espresso:espresso-core)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCore() {
+                return create("androidx.espresso.core");
+        }
+
+    }
+
+    public static class AndroidxRoomLibraryAccessors extends SubDependencyFactory {
+
+        public AndroidxRoomLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for common (androidx.room:room-common)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCommon() {
+                return create("androidx.room.common");
+        }
+
+            /**
+             * Creates a dependency provider for compiler (androidx.room:room-compiler)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getCompiler() {
+                return create("androidx.room.compiler");
+        }
+
+            /**
+             * Creates a dependency provider for ktx (androidx.room:room-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("androidx.room.ktx");
+        }
+
+    }
+
+    public static class FirebaseLibraryAccessors extends SubDependencyFactory {
+        private final FirebaseStorageLibraryAccessors laccForFirebaseStorageLibraryAccessors = new FirebaseStorageLibraryAccessors(owner);
+
+        public FirebaseLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for auth (com.google.firebase:firebase-auth)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getAuth() {
+                return create("firebase.auth");
+        }
+
+            /**
+             * Creates a dependency provider for database (com.google.firebase:firebase-database)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getDatabase() {
+                return create("firebase.database");
+        }
+
+            /**
+             * Creates a dependency provider for firestore (com.google.firebase:firebase-firestore)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getFirestore() {
+                return create("firebase.firestore");
+        }
+
+        /**
+         * Returns the group of libraries at firebase.storage
+         */
+        public FirebaseStorageLibraryAccessors getStorage() {
+            return laccForFirebaseStorageLibraryAccessors;
+        }
+
+    }
+
+    public static class FirebaseStorageLibraryAccessors extends SubDependencyFactory {
+
+        public FirebaseStorageLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for ktx (com.google.firebase:firebase-storage-ktx)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getKtx() {
+                return create("firebase.storage.ktx");
+        }
+
+    }
+
+    public static class GoogleLibraryAccessors extends SubDependencyFactory {
+
+        public GoogleLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for services (com.google.gms:google-services)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getServices() {
+                return create("google.services");
+        }
+
+    }
+
+    public static class PlayLibraryAccessors extends SubDependencyFactory {
+        private final PlayServicesLibraryAccessors laccForPlayServicesLibraryAccessors = new PlayServicesLibraryAccessors(owner);
+
+        public PlayLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+        /**
+         * Returns the group of libraries at play.services
+         */
+        public PlayServicesLibraryAccessors getServices() {
+            return laccForPlayServicesLibraryAccessors;
+        }
+
+    }
+
+    public static class PlayServicesLibraryAccessors extends SubDependencyFactory {
+
+        public PlayServicesLibraryAccessors(AbstractExternalDependencyFactory owner) { super(owner); }
+
+            /**
+             * Creates a dependency provider for location (com.google.android.gms:play-services-location)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getLocation() {
+                return create("play.services.location");
+        }
+
+            /**
+             * Creates a dependency provider for maps (com.google.android.gms:play-services-maps)
+             * This dependency was declared in catalog libs.versions.toml
+             */
+            public Provider<MinimalExternalModuleDependency> getMaps() {
+                return create("play.services.maps");
+        }
+
+    }
+
+    public static class VersionAccessors extends VersionFactory  {
+
+        public VersionAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Returns the version associated to this alias: activity (1.8.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getActivity() { return getVersion("activity"); }
+
+            /**
+             * Returns the version associated to this alias: agp (8.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAgp() { return getVersion("agp"); }
+
+            /**
+             * Returns the version associated to this alias: appcompat (1.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getAppcompat() { return getVersion("appcompat"); }
+
+            /**
+             * Returns the version associated to this alias: compilercommon (3.2.0-alpha11)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getCompilercommon() { return getVersion("compilercommon"); }
+
+            /**
+             * Returns the version associated to this alias: constraintlayout (2.1.4)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getConstraintlayout() { return getVersion("constraintlayout"); }
+
+            /**
+             * Returns the version associated to this alias: coreKtx (1.10.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getCoreKtx() { return getVersion("coreKtx"); }
+
+            /**
+             * Returns the version associated to this alias: espressoCore (3.5.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getEspressoCore() { return getVersion("espressoCore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseAuth (22.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseAuth() { return getVersion("firebaseAuth"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseDatabase (20.3.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseDatabase() { return getVersion("firebaseDatabase"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseFirestore (24.10.3)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseFirestore() { return getVersion("firebaseFirestore"); }
+
+            /**
+             * Returns the version associated to this alias: firebaseStorageKtx (20.3.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getFirebaseStorageKtx() { return getVersion("firebaseStorageKtx"); }
+
+            /**
+             * Returns the version associated to this alias: googleServices (4.4.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getGoogleServices() { return getVersion("googleServices"); }
+
+            /**
+             * Returns the version associated to this alias: junit (4.13.2)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunit() { return getVersion("junit"); }
+
+            /**
+             * Returns the version associated to this alias: junitVersion (1.1.5)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getJunitVersion() { return getVersion("junitVersion"); }
+
+            /**
+             * Returns the version associated to this alias: kotlin (1.9.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getKotlin() { return getVersion("kotlin"); }
+
+            /**
+             * Returns the version associated to this alias: material (1.10.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getMaterial() { return getVersion("material"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesLocation (21.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesLocation() { return getVersion("playServicesLocation"); }
+
+            /**
+             * Returns the version associated to this alias: playServicesMaps (18.2.0)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getPlayServicesMaps() { return getVersion("playServicesMaps"); }
+
+            /**
+             * Returns the version associated to this alias: roomCommon (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCommon() { return getVersion("roomCommon"); }
+
+            /**
+             * Returns the version associated to this alias: roomCompiler (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomCompiler() { return getVersion("roomCompiler"); }
+
+            /**
+             * Returns the version associated to this alias: roomKtx (2.6.1)
+             * If the version is a rich version and that its not expressible as a
+             * single version string, then an empty string is returned.
+             * This version was declared in catalog libs.versions.toml
+             */
+            public Provider<String> getRoomKtx() { return getVersion("roomKtx"); }
+
+    }
+
+    public static class BundleAccessors extends BundleFactory {
+
+        public BundleAccessors(ObjectFactory objects, ProviderFactory providers, DefaultVersionCatalog config, ImmutableAttributesFactory attributesFactory, CapabilityNotationParser capabilityNotationParser) { super(objects, providers, config, attributesFactory, capabilityNotationParser); }
+
+    }
+
+    public static class PluginAccessors extends PluginFactory {
+
+        public PluginAccessors(ProviderFactory providers, DefaultVersionCatalog config) { super(providers, config); }
+
+            /**
+             * Creates a plugin provider for androidApplication to the plugin id 'com.android.application'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getAndroidApplication() { return createPlugin("androidApplication"); }
+
+            /**
+             * Creates a plugin provider for jetbrainsKotlinAndroid to the plugin id 'org.jetbrains.kotlin.android'
+             * This plugin was declared in catalog libs.versions.toml
+             */
+            public Provider<PluginDependency> getJetbrainsKotlinAndroid() { return createPlugin("jetbrainsKotlinAndroid"); }
+
+    }
+
+}
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024__16_13__Changes_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024__16_13__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024__16_13__Changes_1.xml
new file mode 100644
--- /dev/null	(date 1713960960509)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024__16_13__Changes_1.xml	(date 1713960960509)
@@ -0,0 +1,59 @@
+<changelist name="Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1" date="1713705222550" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 21/04/2024, 16:13 [Changes]" />
+  <binary>
+    <option name="BEFORE_PATH" value=".gradle/8.4/fileHashes/fileHashes.lock" />
+    <option name="AFTER_PATH" value=".gradle/8.4/fileHashes/fileHashes.lock" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/fileHashes.lock" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" value=".gradle/8.4/executionHistory/executionHistory.bin" />
+    <option name="AFTER_PATH" value=".gradle/8.4/executionHistory/executionHistory.bin" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/executionHistory.bin" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" value=".gradle/8.4/executionHistory/executionHistory.lock" />
+    <option name="AFTER_PATH" value=".gradle/8.4/executionHistory/executionHistory.lock" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/executionHistory.lock" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" value=".gradle/8.4/checksums/checksums.lock" />
+    <option name="AFTER_PATH" value=".gradle/8.4/checksums/checksums.lock" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/checksums.lock" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" value=".gradle/8.4/dependencies-accessors/executionHistory.bin" />
+    <option name="AFTER_PATH" value=".gradle/8.4/dependencies-accessors/executionHistory.bin" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/executionHistory1.bin" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" value=".gradle/8.4/fileHashes/resourceHashesCache.bin" />
+    <option name="AFTER_PATH" value=".gradle/8.4/fileHashes/resourceHashesCache.bin" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/resourceHashesCache.bin" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" value=".gradle/file-system.probe" />
+    <option name="AFTER_PATH" value=".gradle/file-system.probe" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/file-system.probe" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" value=".gradle/buildOutputCleanup/buildOutputCleanup.lock" />
+    <option name="AFTER_PATH" value=".gradle/buildOutputCleanup/buildOutputCleanup.lock" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/buildOutputCleanup.lock" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" value=".gradle/buildOutputCleanup/outputFiles.bin" />
+    <option name="AFTER_PATH" value=".gradle/buildOutputCleanup/outputFiles.bin" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/outputFiles.bin" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" value=".gradle/8.4/dependencies-accessors/dependencies-accessors.lock" />
+    <option name="AFTER_PATH" value=".gradle/8.4/dependencies-accessors/dependencies-accessors.lock" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/dependencies-accessors.lock" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" value=".gradle/8.4/fileHashes/fileHashes.bin" />
+    <option name="AFTER_PATH" value=".gradle/8.4/fileHashes/fileHashes.bin" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]1/fileHashes.bin" />
+  </binary>
+</changelist>
\ No newline at end of file
Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\r\nagp = \"8.3.0\"\r\nkotlin = \"1.9.0\"\r\ncoreKtx = \"1.10.1\"\r\njunit = \"4.13.2\"\r\njunitVersion = \"1.1.5\"\r\nespressoCore = \"3.5.1\"\r\nappcompat = \"1.6.1\"\r\nmaterial = \"1.10.0\"\r\nactivity = \"1.8.0\"\r\nconstraintlayout = \"2.1.4\"\r\nroomCommon = \"2.6.1\"\r\nroomCompiler = \"2.6.1\"\r\nroomKtx = \"2.6.1\"\r\ngoogleServices = \"4.4.1\"\r\nfirebaseDatabase = \"20.3.1\"\r\nfirebaseFirestore = \"24.10.3\"\r\nfirebaseAuth = \"22.3.1\"\r\nfirebaseStorageKtx = \"20.3.0\"\r\n\r\n[libraries]\r\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\r\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\r\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\r\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\r\nandroidx-appcompat = { group = \"androidx.appcompat\", name = \"appcompat\", version.ref = \"appcompat\" }\r\nmaterial = { group = \"com.google.android.material\", name = \"material\", version.ref = \"material\" }\r\nandroidx-activity = { group = \"androidx.activity\", name = \"activity\", version.ref = \"activity\" }\r\nandroidx-constraintlayout = { group = \"androidx.constraintlayout\", name = \"constraintlayout\", version.ref = \"constraintlayout\" }\r\nandroidx-room-common = { group = \"androidx.room\", name = \"room-common\", version.ref = \"roomCommon\" }\r\nandroidx-room-compiler = { group = \"androidx.room\", name = \"room-compiler\", version.ref = \"roomCompiler\" }\r\nandroidx-room-ktx = { group = \"androidx.room\", name = \"room-ktx\", version.ref = \"roomKtx\" }\r\ngoogle-services = { group = \"com.google.gms\", name = \"google-services\", version.ref = \"googleServices\" }\r\nfirebase-database = { group = \"com.google.firebase\", name = \"firebase-database\", version.ref = \"firebaseDatabase\" }\r\nfirebase-firestore = { group = \"com.google.firebase\", name = \"firebase-firestore\", version.ref = \"firebaseFirestore\" }\r\nfirebase-auth = { group = \"com.google.firebase\", name = \"firebase-auth\", version.ref = \"firebaseAuth\" }\r\nfirebase-storage-ktx = { group = \"com.google.firebase\", name = \"firebase-storage-ktx\", version.ref = \"firebaseStorageKtx\" }\r\n\r\n[plugins]\r\nandroidApplication = { id = \"com.android.application\", version.ref = \"agp\" }\r\njetbrainsKotlinAndroid = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
--- a/gradle/libs.versions.toml	(revision 07ab72a5187cdbd4f214b07f957ef5348becccca)
+++ b/gradle/libs.versions.toml	(date 1713960589657)
@@ -17,6 +17,9 @@
 firebaseFirestore = "24.10.3"
 firebaseAuth = "22.3.1"
 firebaseStorageKtx = "20.3.0"
+playServicesMaps = "18.2.0"
+playServicesLocation = "21.2.0"
+compilercommon = "3.2.0-alpha11"
 
 [libraries]
 androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
@@ -35,6 +38,9 @@
 firebase-firestore = { group = "com.google.firebase", name = "firebase-firestore", version.ref = "firebaseFirestore" }
 firebase-auth = { group = "com.google.firebase", name = "firebase-auth", version.ref = "firebaseAuth" }
 firebase-storage-ktx = { group = "com.google.firebase", name = "firebase-storage-ktx", version.ref = "firebaseStorageKtx" }
+play-services-maps = { group = "com.google.android.gms", name = "play-services-maps", version.ref = "playServicesMaps" }
+play-services-location = { group = "com.google.android.gms", name = "play-services-location", version.ref = "playServicesLocation" }
+androidx-compilerCommon = { group = "androidx.databinding", name = "compilerCommon", version.ref = "compilercommon" }
 
 [plugins]
 androidApplication = { id = "com.android.application", version.ref = "agp" }
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024__16_13__Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024__16_13__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024__16_13__Changes_.xml
new file mode 100644
--- /dev/null	(date 1713960960501)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024__16_13__Changes_.xml	(date 1713960960501)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]" date="1713705210438" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21_04_2024,_16_13_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 21/04/2024, 16:13 [Changes]" />
+</changelist>
\ No newline at end of file
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_04_2024_15_05_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_24_04_2024_15_05_[Changes]/shelved.patch
new file mode 100644
